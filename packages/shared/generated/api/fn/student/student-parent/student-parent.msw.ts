/**
 * Generated by orval v6.24.0 🍺
 * Do not edit manually.
 * CLUS API
 * CLUS Backend API Spec
 * OpenAPI spec version: v1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type { StudentReportResponse } from "../../../model";

export const getGetEnrollmentReportLpHUwE0Mock = (
  overrideResponse: any = {}
): StudentReportResponse => ({
  dailyCompletedContentCounts: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    contentCount: faker.number.int({ min: undefined, max: undefined }),
    date: faker.word.sample(),
    ...overrideResponse,
  })),
  dailyStudyTimes: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    date: faker.word.sample(),
    studyTime: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  })),
  drills: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    details: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      allCorrectCount: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      allQuestionCount: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      contentType: faker.helpers.arrayElement([
        "EXAM",
        "CLIP",
        "TEXTBOOK",
      ] as const),
      earnedScore: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      isCompleted: faker.datatype.boolean(),
      perfectScore: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      studiedAt: faker.word.sample(),
      studyTime: faker.number.int({ min: undefined, max: undefined }),
      title: faker.word.sample(),
      ...overrideResponse,
    })),
    endedAt: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    progress: faker.number.int({ min: undefined, max: undefined }),
    round: faker.number.int({ min: undefined, max: undefined }),
    startedAt: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
  })),
  lives: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    isCompleted: faker.datatype.boolean(),
    liveEndedAt: faker.word.sample(),
    liveStartedAt: faker.word.sample(),
    title: faker.word.sample(),
    ...overrideResponse,
  })),
  summary: {
    assignedDrillContentCount: faker.number.int({
      min: undefined,
      max: undefined,
    }),
    assignedLiveCount: faker.number.int({ min: undefined, max: undefined }),
    clinicEndedAt: faker.word.sample(),
    clinicLectureType: faker.helpers.arrayElement([
      "DRILL_CENTERED",
      "LIVE_CENTERED",
    ] as const),
    clinicStartedAt: faker.word.sample(),
    clinicTitle: faker.word.sample(),
    completedDrillContentCount: faker.number.int({
      min: undefined,
      max: undefined,
    }),
    completedLiveCount: faker.number.int({ min: undefined, max: undefined }),
    drillOpenType: faker.helpers.arrayElement([
      "ENTIRE",
      "SEQUENTIAL",
    ] as const),
    reportContent: faker.word.sample(),
    studentName: faker.word.sample(),
    studyStartedAt: faker.word.sample(),
    totalStudyTime: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  ...overrideResponse,
});

export const getGetEnrollmentReportLpHUwE0MockHandler = (
  overrideResponse?: StudentReportResponse
) => {
  return http.get(
    "*/student-parents/clinic-enrollments/:enrollmentId/report",
    async () => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse
            ? overrideResponse
            : getGetEnrollmentReportLpHUwE0Mock()
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        }
      );
    }
  );
};
export const getStudentParentMock = () => [
  getGetEnrollmentReportLpHUwE0MockHandler(),
];
