/**
 * Generated by orval v6.24.0 🍺
 * Do not edit manually.
 * CLUS API
 * CLUS Backend API Spec
 * OpenAPI spec version: v1.0.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  GetCurationPopularClinicsParams,
  GetCurationRecommendationClinic1Params,
  PathApiError,
  StudentCurationRecommendationClinicResponse,
  StudentSimpleClinicResponse,
} from "../../../model";
import { axiosInstance } from "../../../config/axios-instance";
import type { ErrorType } from "../../../config/axios-instance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary 큐레이션 추천 클래스 조회하기
 */
export const getCurationRecommendationClinic1 = (
  params?: GetCurationRecommendationClinic1Params,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<StudentCurationRecommendationClinicResponse[]>(
    {
      url: `/clus/curation/recommendation-clinics`,
      method: "GET",
      params,
      signal,
    },
    options
  );
};

export const getGetCurationRecommendationClinic1QueryKey = (
  params?: GetCurationRecommendationClinic1Params
) => {
  return [
    `/clus/curation/recommendation-clinics`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetCurationRecommendationClinic1QueryOptions = <
  TData = Awaited<ReturnType<typeof getCurationRecommendationClinic1>>,
  TError = ErrorType<PathApiError>
>(
  params?: GetCurationRecommendationClinic1Params,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCurationRecommendationClinic1>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetCurationRecommendationClinic1QueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCurationRecommendationClinic1>>
  > = ({ signal }) =>
    getCurationRecommendationClinic1(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCurationRecommendationClinic1>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCurationRecommendationClinic1QueryResult = NonNullable<
  Awaited<ReturnType<typeof getCurationRecommendationClinic1>>
>;
export type GetCurationRecommendationClinic1QueryError =
  ErrorType<PathApiError>;

/**
 * @summary 큐레이션 추천 클래스 조회하기
 */
export const useGetCurationRecommendationClinic1 = <
  TData = Awaited<ReturnType<typeof getCurationRecommendationClinic1>>,
  TError = ErrorType<PathApiError>
>(
  params?: GetCurationRecommendationClinic1Params,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCurationRecommendationClinic1>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCurationRecommendationClinic1QueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary 큐레이션 인기 클래스 조회하기
 */
export const getCurationPopularClinics = (
  params?: GetCurationPopularClinicsParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<StudentSimpleClinicResponse[]>(
    { url: `/clus/curation/popular-clinics`, method: "GET", params, signal },
    options
  );
};

export const getGetCurationPopularClinicsQueryKey = (
  params?: GetCurationPopularClinicsParams
) => {
  return [
    `/clus/curation/popular-clinics`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetCurationPopularClinicsQueryOptions = <
  TData = Awaited<ReturnType<typeof getCurationPopularClinics>>,
  TError = ErrorType<PathApiError>
>(
  params?: GetCurationPopularClinicsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCurationPopularClinics>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCurationPopularClinicsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCurationPopularClinics>>
  > = ({ signal }) => getCurationPopularClinics(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCurationPopularClinics>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCurationPopularClinicsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCurationPopularClinics>>
>;
export type GetCurationPopularClinicsQueryError = ErrorType<PathApiError>;

/**
 * @summary 큐레이션 인기 클래스 조회하기
 */
export const useGetCurationPopularClinics = <
  TData = Awaited<ReturnType<typeof getCurationPopularClinics>>,
  TError = ErrorType<PathApiError>
>(
  params?: GetCurationPopularClinicsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCurationPopularClinics>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCurationPopularClinicsQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
