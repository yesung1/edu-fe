/**
 * Generated by orval v6.24.0 🍺
 * Do not edit manually.
 * CLUS API
 * CLUS Backend API Spec
 * OpenAPI spec version: v1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type {
  StudentCurationRecommendationClinicResponse,
  StudentSimpleClinicResponse,
} from "../../../model";

export const getGetCurationRecommendationClinic1Mock = (
  overrideResponse: any = {}
): StudentCurationRecommendationClinicResponse[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    clinics: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      clinicId: faker.word.sample(),
      clinicProgressStep: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "ONGOING_DRILL",
          "BEFORE_DRILL_ASSIGNED",
          "BEFORE_DRILL_LEARNED",
          "BEFORE_REPORT",
          "REPORT_RECEPTION",
          "CLINIC_COMPLETION",
          "CLINIC_EXPIRATION",
        ] as const),
        undefined,
      ]),
      majorSubject: faker.helpers.arrayElement([
        {
          code: faker.word.sample(),
          name: faker.word.sample(),
          ...overrideResponse,
        },
        undefined,
      ]),
      teacherName: faker.word.sample(),
      thumbnailImageUrl: faker.word.sample(),
      title: faker.word.sample(),
      ...overrideResponse,
    })),
    curationRecommendationClinicSchoolYear: faker.helpers.arrayElement([
      "ALL",
      "MIDDLE_SCHOOL_THIRD_YEAR",
      "HIGH_SCHOOL_FIRST_YEAR",
      "HIGH_SCHOOL_SECOND_YEAR",
      "HIGH_SCHOOL_THIRD_YEAR",
      "REPEATER",
    ] as const),
    title: faker.word.sample(),
    ...overrideResponse,
  }));

export const getGetCurationPopularClinicsMock = (
  overrideResponse: any = {}
): StudentSimpleClinicResponse[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    clinicId: faker.word.sample(),
    clinicProgressStep: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        "ONGOING_DRILL",
        "BEFORE_DRILL_ASSIGNED",
        "BEFORE_DRILL_LEARNED",
        "BEFORE_REPORT",
        "REPORT_RECEPTION",
        "CLINIC_COMPLETION",
        "CLINIC_EXPIRATION",
      ] as const),
      undefined,
    ]),
    majorSubject: faker.helpers.arrayElement([
      {
        code: faker.word.sample(),
        name: faker.word.sample(),
        ...overrideResponse,
      },
      undefined,
    ]),
    teacherName: faker.word.sample(),
    thumbnailImageUrl: faker.word.sample(),
    title: faker.word.sample(),
    ...overrideResponse,
  }));

export const getGetCurationRecommendationClinic1MockHandler = (
  overrideResponse?: StudentCurationRecommendationClinicResponse[]
) => {
  return http.get("*/clus/curation/recommendation-clinics", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetCurationRecommendationClinic1Mock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getGetCurationPopularClinicsMockHandler = (
  overrideResponse?: StudentSimpleClinicResponse[]
) => {
  return http.get("*/clus/curation/popular-clinics", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetCurationPopularClinicsMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};
export const getCurationMock = () => [
  getGetCurationRecommendationClinic1MockHandler(),
  getGetCurationPopularClinicsMockHandler(),
];
