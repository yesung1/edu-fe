/**
 * Generated by orval v6.24.0 🍺
 * Do not edit manually.
 * CLUS API
 * CLUS Backend API Spec
 * OpenAPI spec version: v1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type {
  ClipDrillResponse,
  StudentEndedDrillListResponse,
  StudentLiveResponse,
  StudentOwnClinicItemResponse,
  StudentReportResponse,
  StudentSimpleDrillResponse,
} from "../../../model";

export const getGetEndedClinicTextbookDrillBwMmSgMock = (
  overrideResponse: any = {}
): ClipDrillResponse => ({
  content: {
    categories: faker.helpers.arrayElement([
      "CONCEPTUAL_LECTURE",
      "PROBLEM_SOLVING",
      "LEARNING_SUMMARY",
    ] as const),
    completionConditionType: faker.helpers.arrayElement([
      "PARTIAL_VIEWING",
      "FULL_VIEWING",
    ] as const),
    dashUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    description: faker.word.sample(),
    hlsUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    id: faker.word.sample(),
    name: faker.word.sample(),
    playUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    tags: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    transcodingStatus: faker.helpers.arrayElement([
      "IN_PROGRESS",
      "COMPLETED",
      "FAILED",
    ] as const),
    uploadFileInfo: faker.helpers.arrayElement([
      {
        fileName: faker.word.sample(),
        fileSize: faker.number.int({ min: undefined, max: undefined }),
        fileUrl: faker.word.sample(),
        id: faker.word.sample(),
        ...overrideResponse,
      },
      undefined,
    ]),
    uploadType: faker.helpers.arrayElement([
      "INTERNAL",
      "INTERNAL_DRM",
      "YOUTUBE",
      "VIMEO",
    ] as const),
    videoId: faker.word.sample(),
    viewingPoint: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  contentType: faker.word.sample(),
  drillRound: faker.number.int({ min: undefined, max: undefined }),
  id: faker.word.sample(),
  isCompleted: faker.datatype.boolean(),
  nextContentType: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  nextId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getGetEndedClinicReportB8FT85MMock = (
  overrideResponse: any = {}
): StudentReportResponse => ({
  dailyCompletedContentCounts: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    contentCount: faker.number.int({ min: undefined, max: undefined }),
    date: faker.word.sample(),
    ...overrideResponse,
  })),
  dailyStudyTimes: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    date: faker.word.sample(),
    studyTime: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  })),
  drills: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    details: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      allCorrectCount: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      allQuestionCount: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      contentType: faker.helpers.arrayElement([
        "EXAM",
        "CLIP",
        "TEXTBOOK",
      ] as const),
      earnedScore: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      isCompleted: faker.datatype.boolean(),
      perfectScore: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      studiedAt: faker.word.sample(),
      studyTime: faker.number.int({ min: undefined, max: undefined }),
      title: faker.word.sample(),
      ...overrideResponse,
    })),
    endedAt: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    progress: faker.number.int({ min: undefined, max: undefined }),
    round: faker.number.int({ min: undefined, max: undefined }),
    startedAt: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
  })),
  lives: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    isCompleted: faker.datatype.boolean(),
    liveEndedAt: faker.word.sample(),
    liveStartedAt: faker.word.sample(),
    title: faker.word.sample(),
    ...overrideResponse,
  })),
  summary: {
    assignedDrillContentCount: faker.number.int({
      min: undefined,
      max: undefined,
    }),
    assignedLiveCount: faker.number.int({ min: undefined, max: undefined }),
    clinicEndedAt: faker.word.sample(),
    clinicLectureType: faker.helpers.arrayElement([
      "DRILL_CENTERED",
      "LIVE_CENTERED",
    ] as const),
    clinicStartedAt: faker.word.sample(),
    clinicTitle: faker.word.sample(),
    completedDrillContentCount: faker.number.int({
      min: undefined,
      max: undefined,
    }),
    completedLiveCount: faker.number.int({ min: undefined, max: undefined }),
    drillOpenType: faker.helpers.arrayElement([
      "ENTIRE",
      "SEQUENTIAL",
    ] as const),
    reportContent: faker.word.sample(),
    studentName: faker.word.sample(),
    studyStartedAt: faker.word.sample(),
    totalStudyTime: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  ...overrideResponse,
});

export const getGetEndedClinicClipDrillBwMmSgMock = (
  overrideResponse: any = {}
): ClipDrillResponse => ({
  content: {
    categories: faker.helpers.arrayElement([
      "CONCEPTUAL_LECTURE",
      "PROBLEM_SOLVING",
      "LEARNING_SUMMARY",
    ] as const),
    completionConditionType: faker.helpers.arrayElement([
      "PARTIAL_VIEWING",
      "FULL_VIEWING",
    ] as const),
    dashUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    description: faker.word.sample(),
    hlsUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    id: faker.word.sample(),
    name: faker.word.sample(),
    playUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    tags: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    transcodingStatus: faker.helpers.arrayElement([
      "IN_PROGRESS",
      "COMPLETED",
      "FAILED",
    ] as const),
    uploadFileInfo: faker.helpers.arrayElement([
      {
        fileName: faker.word.sample(),
        fileSize: faker.number.int({ min: undefined, max: undefined }),
        fileUrl: faker.word.sample(),
        id: faker.word.sample(),
        ...overrideResponse,
      },
      undefined,
    ]),
    uploadType: faker.helpers.arrayElement([
      "INTERNAL",
      "INTERNAL_DRM",
      "YOUTUBE",
      "VIMEO",
    ] as const),
    videoId: faker.word.sample(),
    viewingPoint: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  contentType: faker.word.sample(),
  drillRound: faker.number.int({ min: undefined, max: undefined }),
  id: faker.word.sample(),
  isCompleted: faker.datatype.boolean(),
  nextContentType: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  nextId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getGetEndedClinicsMock = (
  overrideResponse: any = {}
): StudentOwnClinicItemResponse[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    boardNotification: {
      message: faker.word.sample(),
      messageType: faker.helpers.arrayElement(["DEFAULT", "ALERT"] as const),
      ...overrideResponse,
    },
    clinicEndedDate: faker.helpers.arrayElement([
      faker.word.sample(),
      undefined,
    ]),
    clinicId: faker.word.sample(),
    clinicNotification: {
      message: faker.word.sample(),
      messageType: faker.helpers.arrayElement(["DEFAULT", "ALERT"] as const),
      ...overrideResponse,
    },
    clinicStartedDate: faker.word.sample(),
    majorSubject: {
      code: faker.word.sample(),
      name: faker.word.sample(),
      ...overrideResponse,
    },
    status: faker.helpers.arrayElement(["PREPARE", "OPEN", "CLOSE"] as const),
    teacherName: faker.word.sample(),
    thumbnailImageUrl: faker.word.sample(),
    title: faker.word.sample(),
    ...overrideResponse,
  }));

export const getGetEndedClinicLivesB8FT85MMock = (
  overrideResponse: any = {}
): StudentLiveResponse[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    id: faker.word.sample(),
    isCompleted: faker.datatype.boolean(),
    isJoinable: faker.datatype.boolean(),
    liveEndedAt: faker.word.sample(),
    liveStartedAt: faker.word.sample(),
    name: faker.word.sample(),
    remainingDayCount: faker.number.int({ min: undefined, max: undefined }),
    status: faker.helpers.arrayElement(["PENDING", "ON_AIR", "ENDED"] as const),
    ...overrideResponse,
  }));

export const getGetEndedClinicExamDrillBwMmSgMock = (
  overrideResponse: any = {}
): ClipDrillResponse => ({
  content: {
    categories: faker.helpers.arrayElement([
      "CONCEPTUAL_LECTURE",
      "PROBLEM_SOLVING",
      "LEARNING_SUMMARY",
    ] as const),
    completionConditionType: faker.helpers.arrayElement([
      "PARTIAL_VIEWING",
      "FULL_VIEWING",
    ] as const),
    dashUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    description: faker.word.sample(),
    hlsUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    id: faker.word.sample(),
    name: faker.word.sample(),
    playUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    tags: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    transcodingStatus: faker.helpers.arrayElement([
      "IN_PROGRESS",
      "COMPLETED",
      "FAILED",
    ] as const),
    uploadFileInfo: faker.helpers.arrayElement([
      {
        fileName: faker.word.sample(),
        fileSize: faker.number.int({ min: undefined, max: undefined }),
        fileUrl: faker.word.sample(),
        id: faker.word.sample(),
        ...overrideResponse,
      },
      undefined,
    ]),
    uploadType: faker.helpers.arrayElement([
      "INTERNAL",
      "INTERNAL_DRM",
      "YOUTUBE",
      "VIMEO",
    ] as const),
    videoId: faker.word.sample(),
    viewingPoint: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  contentType: faker.word.sample(),
  drillRound: faker.number.int({ min: undefined, max: undefined }),
  id: faker.word.sample(),
  isCompleted: faker.datatype.boolean(),
  nextContentType: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  nextId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getGetEndedClinicAllDrillsB8FT85MMock = (
  overrideResponse: any = {}
): StudentSimpleDrillResponse[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    drillContents: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      contentType: faker.helpers.arrayElement([
        "EXAM",
        "CLIP",
        "TEXTBOOK",
      ] as const),
      drillContentId: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      isCompleted: faker.datatype.boolean(),
      title: faker.word.sample(),
      ...overrideResponse,
    })),
    drillRound: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  }));

export const getGetEndedClinicDrillsB8FT85MMock = (
  overrideResponse: any = {}
): StudentEndedDrillListResponse => ({
  clinicEndedDate: faker.word.sample(),
  clinicStartedDate: faker.word.sample(),
  clinicTitle: faker.word.sample(),
  currentDrillContentId: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  currentDrillRound: faker.number.int({ min: undefined, max: undefined }),
  drillOpenType: faker.helpers.arrayElement(["ENTIRE", "SEQUENTIAL"] as const),
  drillSummary: {
    clipDrillContentTotalCount: faker.number.int({
      min: undefined,
      max: undefined,
    }),
    drillContentTotalCount: faker.number.int({
      min: undefined,
      max: undefined,
    }),
    drillTotalCount: faker.number.int({ min: undefined, max: undefined }),
    examDrillContentTotalCount: faker.number.int({
      min: undefined,
      max: undefined,
    }),
    textbookDrillContentTotalCount: faker.number.int({
      min: undefined,
      max: undefined,
    }),
    ...overrideResponse,
  },
  items: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    assignedCount: faker.number.int({ min: undefined, max: undefined }),
    completedCount: faker.number.int({ min: undefined, max: undefined }),
    details: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      clipContentAttribute: faker.helpers.arrayElement([
        {
          clipRunningTime: faker.word.sample(),
          clipType: faker.word.sample(),
          ...overrideResponse,
        },
        undefined,
      ]),
      contentAttribute: faker.word.sample(),
      contentType: faker.helpers.arrayElement([
        "EXAM",
        "CLIP",
        "TEXTBOOK",
      ] as const),
      id: faker.word.sample(),
      isCompleted: faker.datatype.boolean(),
      title: faker.word.sample(),
      ...overrideResponse,
    })),
    goalMessage: faker.word.sample(),
    round: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  })),
  ...overrideResponse,
});

export const getGetEndedClinicTextbookDrillBwMmSgMockHandler = (
  overrideResponse?: ClipDrillResponse
) => {
  return http.get(
    "*/clus/v2/ended-clinics/:clinicId/textbook-drills/:drillId",
    async () => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse
            ? overrideResponse
            : getGetEndedClinicTextbookDrillBwMmSgMock()
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        }
      );
    }
  );
};

export const getGetEndedClinicReportB8FT85MMockHandler = (
  overrideResponse?: StudentReportResponse
) => {
  return http.get("*/clus/v2/ended-clinics/:clinicId/report", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetEndedClinicReportB8FT85MMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getGetEndedClinicClipDrillBwMmSgMockHandler = (
  overrideResponse?: ClipDrillResponse
) => {
  return http.get(
    "*/clus/v2/ended-clinics/:clinicId/clip-drills/:drillId",
    async () => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse
            ? overrideResponse
            : getGetEndedClinicClipDrillBwMmSgMock()
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        }
      );
    }
  );
};

export const getGetEndedClinicsMockHandler = (
  overrideResponse?: StudentOwnClinicItemResponse[]
) => {
  return http.get("*/clus/ended-clinics", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetEndedClinicsMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getGetEndedClinicLivesB8FT85MMockHandler = (
  overrideResponse?: StudentLiveResponse[]
) => {
  return http.get("*/clus/ended-clinics/:clinicId/lives", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetEndedClinicLivesB8FT85MMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getGetEndedClinicExamDrillBwMmSgMockHandler = (
  overrideResponse?: ClipDrillResponse
) => {
  return http.get(
    "*/clus/ended-clinics/:clinicId/exam-drills/:drillId",
    async () => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse
            ? overrideResponse
            : getGetEndedClinicExamDrillBwMmSgMock()
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        }
      );
    }
  );
};

export const getGetEndedClinicAllDrillsB8FT85MMockHandler = (
  overrideResponse?: StudentSimpleDrillResponse[]
) => {
  return http.get("*/clus/ended-clinics/:clinicId/entire-drills", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetEndedClinicAllDrillsB8FT85MMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getGetEndedClinicDrillsB8FT85MMockHandler = (
  overrideResponse?: StudentEndedDrillListResponse
) => {
  return http.get("*/clus/ended-clinics/:clinicId/drills", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetEndedClinicDrillsB8FT85MMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};
export const getEndedClinicMock = () => [
  getGetEndedClinicTextbookDrillBwMmSgMockHandler(),
  getGetEndedClinicReportB8FT85MMockHandler(),
  getGetEndedClinicClipDrillBwMmSgMockHandler(),
  getGetEndedClinicsMockHandler(),
  getGetEndedClinicLivesB8FT85MMockHandler(),
  getGetEndedClinicExamDrillBwMmSgMockHandler(),
  getGetEndedClinicAllDrillsB8FT85MMockHandler(),
  getGetEndedClinicDrillsB8FT85MMockHandler(),
];
