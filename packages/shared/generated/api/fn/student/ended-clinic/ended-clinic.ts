/**
 * Generated by orval v6.24.0 🍺
 * Do not edit manually.
 * CLUS API
 * CLUS Backend API Spec
 * OpenAPI spec version: v1.0.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  ClipDrillResponse,
  GetEndedClinicsParams,
  PathApiError,
  StudentEndedDrillListResponse,
  StudentLiveResponse,
  StudentOwnClinicItemResponse,
  StudentReportResponse,
  StudentSimpleDrillResponse,
} from "../../../model";
import { axiosInstance } from "../../../config/axios-instance";
import type { ErrorType } from "../../../config/axios-instance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary 완료한 클리닉 드릴 - 교안 조회하기 V2
 */
export const getEndedClinicTextbookDrillBwMmSg = (
  clinicId: string,
  drillId: string,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<ClipDrillResponse>(
    {
      url: `/clus/v2/ended-clinics/${clinicId}/textbook-drills/${drillId}`,
      method: "GET",
      signal,
    },
    options
  );
};

export const getGetEndedClinicTextbookDrillBwMmSgQueryKey = (
  clinicId: string,
  drillId: string
) => {
  return [
    `/clus/v2/ended-clinics/${clinicId}/textbook-drills/${drillId}`,
  ] as const;
};

export const getGetEndedClinicTextbookDrillBwMmSgQueryOptions = <
  TData = Awaited<ReturnType<typeof getEndedClinicTextbookDrillBwMmSg>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  drillId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getEndedClinicTextbookDrillBwMmSg>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetEndedClinicTextbookDrillBwMmSgQueryKey(clinicId, drillId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getEndedClinicTextbookDrillBwMmSg>>
  > = ({ signal }) =>
    getEndedClinicTextbookDrillBwMmSg(
      clinicId,
      drillId,
      requestOptions,
      signal
    );

  return {
    queryKey,
    queryFn,
    enabled: !!(clinicId && drillId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getEndedClinicTextbookDrillBwMmSg>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetEndedClinicTextbookDrillBwMmSgQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEndedClinicTextbookDrillBwMmSg>>
>;
export type GetEndedClinicTextbookDrillBwMmSgQueryError =
  ErrorType<PathApiError>;

/**
 * @summary 완료한 클리닉 드릴 - 교안 조회하기 V2
 */
export const useGetEndedClinicTextbookDrillBwMmSg = <
  TData = Awaited<ReturnType<typeof getEndedClinicTextbookDrillBwMmSg>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  drillId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getEndedClinicTextbookDrillBwMmSg>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetEndedClinicTextbookDrillBwMmSgQueryOptions(
    clinicId,
    drillId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary 완료한 클리닉 리포트 조회하기 V2
 */
export const getEndedClinicReportB8FT85M = (
  clinicId: string,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<StudentReportResponse>(
    { url: `/clus/v2/ended-clinics/${clinicId}/report`, method: "GET", signal },
    options
  );
};

export const getGetEndedClinicReportB8FT85MQueryKey = (clinicId: string) => {
  return [`/clus/v2/ended-clinics/${clinicId}/report`] as const;
};

export const getGetEndedClinicReportB8FT85MQueryOptions = <
  TData = Awaited<ReturnType<typeof getEndedClinicReportB8FT85M>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getEndedClinicReportB8FT85M>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetEndedClinicReportB8FT85MQueryKey(clinicId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getEndedClinicReportB8FT85M>>
  > = ({ signal }) =>
    getEndedClinicReportB8FT85M(clinicId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!clinicId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getEndedClinicReportB8FT85M>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetEndedClinicReportB8FT85MQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEndedClinicReportB8FT85M>>
>;
export type GetEndedClinicReportB8FT85MQueryError = ErrorType<PathApiError>;

/**
 * @summary 완료한 클리닉 리포트 조회하기 V2
 */
export const useGetEndedClinicReportB8FT85M = <
  TData = Awaited<ReturnType<typeof getEndedClinicReportB8FT85M>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getEndedClinicReportB8FT85M>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetEndedClinicReportB8FT85MQueryOptions(
    clinicId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary 완료한 클리닉 드릴 - 클립 조회하기 V2
 */
export const getEndedClinicClipDrillBwMmSg = (
  clinicId: string,
  drillId: string,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<ClipDrillResponse>(
    {
      url: `/clus/v2/ended-clinics/${clinicId}/clip-drills/${drillId}`,
      method: "GET",
      signal,
    },
    options
  );
};

export const getGetEndedClinicClipDrillBwMmSgQueryKey = (
  clinicId: string,
  drillId: string
) => {
  return [`/clus/v2/ended-clinics/${clinicId}/clip-drills/${drillId}`] as const;
};

export const getGetEndedClinicClipDrillBwMmSgQueryOptions = <
  TData = Awaited<ReturnType<typeof getEndedClinicClipDrillBwMmSg>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  drillId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getEndedClinicClipDrillBwMmSg>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetEndedClinicClipDrillBwMmSgQueryKey(clinicId, drillId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getEndedClinicClipDrillBwMmSg>>
  > = ({ signal }) =>
    getEndedClinicClipDrillBwMmSg(clinicId, drillId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(clinicId && drillId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getEndedClinicClipDrillBwMmSg>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetEndedClinicClipDrillBwMmSgQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEndedClinicClipDrillBwMmSg>>
>;
export type GetEndedClinicClipDrillBwMmSgQueryError = ErrorType<PathApiError>;

/**
 * @summary 완료한 클리닉 드릴 - 클립 조회하기 V2
 */
export const useGetEndedClinicClipDrillBwMmSg = <
  TData = Awaited<ReturnType<typeof getEndedClinicClipDrillBwMmSg>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  drillId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getEndedClinicClipDrillBwMmSg>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetEndedClinicClipDrillBwMmSgQueryOptions(
    clinicId,
    drillId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary 완료한 클리닉 목록 조회하기
 */
export const getEndedClinics = (
  params?: GetEndedClinicsParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<StudentOwnClinicItemResponse[]>(
    { url: `/clus/ended-clinics`, method: "GET", params, signal },
    options
  );
};

export const getGetEndedClinicsQueryKey = (params?: GetEndedClinicsParams) => {
  return [`/clus/ended-clinics`, ...(params ? [params] : [])] as const;
};

export const getGetEndedClinicsQueryOptions = <
  TData = Awaited<ReturnType<typeof getEndedClinics>>,
  TError = ErrorType<PathApiError>
>(
  params?: GetEndedClinicsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getEndedClinics>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEndedClinicsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEndedClinics>>> = ({
    signal,
  }) => getEndedClinics(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEndedClinics>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetEndedClinicsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEndedClinics>>
>;
export type GetEndedClinicsQueryError = ErrorType<PathApiError>;

/**
 * @summary 완료한 클리닉 목록 조회하기
 */
export const useGetEndedClinics = <
  TData = Awaited<ReturnType<typeof getEndedClinics>>,
  TError = ErrorType<PathApiError>
>(
  params?: GetEndedClinicsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getEndedClinics>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetEndedClinicsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary 완료한 클리닉 라이브 목록 조회하기
 */
export const getEndedClinicLivesB8FT85M = (
  clinicId: string,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<StudentLiveResponse[]>(
    { url: `/clus/ended-clinics/${clinicId}/lives`, method: "GET", signal },
    options
  );
};

export const getGetEndedClinicLivesB8FT85MQueryKey = (clinicId: string) => {
  return [`/clus/ended-clinics/${clinicId}/lives`] as const;
};

export const getGetEndedClinicLivesB8FT85MQueryOptions = <
  TData = Awaited<ReturnType<typeof getEndedClinicLivesB8FT85M>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getEndedClinicLivesB8FT85M>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetEndedClinicLivesB8FT85MQueryKey(clinicId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getEndedClinicLivesB8FT85M>>
  > = ({ signal }) =>
    getEndedClinicLivesB8FT85M(clinicId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!clinicId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getEndedClinicLivesB8FT85M>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetEndedClinicLivesB8FT85MQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEndedClinicLivesB8FT85M>>
>;
export type GetEndedClinicLivesB8FT85MQueryError = ErrorType<PathApiError>;

/**
 * @summary 완료한 클리닉 라이브 목록 조회하기
 */
export const useGetEndedClinicLivesB8FT85M = <
  TData = Awaited<ReturnType<typeof getEndedClinicLivesB8FT85M>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getEndedClinicLivesB8FT85M>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetEndedClinicLivesB8FT85MQueryOptions(
    clinicId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary 완료한 클리닉 드릴 - 문풀 조회하기 V2
 */
export const getEndedClinicExamDrillBwMmSg = (
  clinicId: string,
  drillId: string,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<ClipDrillResponse>(
    {
      url: `/clus/ended-clinics/${clinicId}/exam-drills/${drillId}`,
      method: "GET",
      signal,
    },
    options
  );
};

export const getGetEndedClinicExamDrillBwMmSgQueryKey = (
  clinicId: string,
  drillId: string
) => {
  return [`/clus/ended-clinics/${clinicId}/exam-drills/${drillId}`] as const;
};

export const getGetEndedClinicExamDrillBwMmSgQueryOptions = <
  TData = Awaited<ReturnType<typeof getEndedClinicExamDrillBwMmSg>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  drillId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getEndedClinicExamDrillBwMmSg>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetEndedClinicExamDrillBwMmSgQueryKey(clinicId, drillId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getEndedClinicExamDrillBwMmSg>>
  > = ({ signal }) =>
    getEndedClinicExamDrillBwMmSg(clinicId, drillId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(clinicId && drillId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getEndedClinicExamDrillBwMmSg>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetEndedClinicExamDrillBwMmSgQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEndedClinicExamDrillBwMmSg>>
>;
export type GetEndedClinicExamDrillBwMmSgQueryError = ErrorType<PathApiError>;

/**
 * @summary 완료한 클리닉 드릴 - 문풀 조회하기 V2
 */
export const useGetEndedClinicExamDrillBwMmSg = <
  TData = Awaited<ReturnType<typeof getEndedClinicExamDrillBwMmSg>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  drillId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getEndedClinicExamDrillBwMmSg>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetEndedClinicExamDrillBwMmSgQueryOptions(
    clinicId,
    drillId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * 클래스 홈의 전체보기 용으로 활용된다.
 * @summary 완료한 클리닉 드릴 - 전체 조회하기
 */
export const getEndedClinicAllDrillsB8FT85M = (
  clinicId: string,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<StudentSimpleDrillResponse[]>(
    {
      url: `/clus/ended-clinics/${clinicId}/entire-drills`,
      method: "GET",
      signal,
    },
    options
  );
};

export const getGetEndedClinicAllDrillsB8FT85MQueryKey = (clinicId: string) => {
  return [`/clus/ended-clinics/${clinicId}/entire-drills`] as const;
};

export const getGetEndedClinicAllDrillsB8FT85MQueryOptions = <
  TData = Awaited<ReturnType<typeof getEndedClinicAllDrillsB8FT85M>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getEndedClinicAllDrillsB8FT85M>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetEndedClinicAllDrillsB8FT85MQueryKey(clinicId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getEndedClinicAllDrillsB8FT85M>>
  > = ({ signal }) =>
    getEndedClinicAllDrillsB8FT85M(clinicId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!clinicId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getEndedClinicAllDrillsB8FT85M>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetEndedClinicAllDrillsB8FT85MQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEndedClinicAllDrillsB8FT85M>>
>;
export type GetEndedClinicAllDrillsB8FT85MQueryError = ErrorType<PathApiError>;

/**
 * @summary 완료한 클리닉 드릴 - 전체 조회하기
 */
export const useGetEndedClinicAllDrillsB8FT85M = <
  TData = Awaited<ReturnType<typeof getEndedClinicAllDrillsB8FT85M>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getEndedClinicAllDrillsB8FT85M>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetEndedClinicAllDrillsB8FT85MQueryOptions(
    clinicId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary 완료한 클리닉의 드릴 조회하기
 */
export const getEndedClinicDrillsB8FT85M = (
  clinicId: string,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<StudentEndedDrillListResponse>(
    { url: `/clus/ended-clinics/${clinicId}/drills`, method: "GET", signal },
    options
  );
};

export const getGetEndedClinicDrillsB8FT85MQueryKey = (clinicId: string) => {
  return [`/clus/ended-clinics/${clinicId}/drills`] as const;
};

export const getGetEndedClinicDrillsB8FT85MQueryOptions = <
  TData = Awaited<ReturnType<typeof getEndedClinicDrillsB8FT85M>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getEndedClinicDrillsB8FT85M>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetEndedClinicDrillsB8FT85MQueryKey(clinicId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getEndedClinicDrillsB8FT85M>>
  > = ({ signal }) =>
    getEndedClinicDrillsB8FT85M(clinicId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!clinicId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getEndedClinicDrillsB8FT85M>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetEndedClinicDrillsB8FT85MQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEndedClinicDrillsB8FT85M>>
>;
export type GetEndedClinicDrillsB8FT85MQueryError = ErrorType<PathApiError>;

/**
 * @summary 완료한 클리닉의 드릴 조회하기
 */
export const useGetEndedClinicDrillsB8FT85M = <
  TData = Awaited<ReturnType<typeof getEndedClinicDrillsB8FT85M>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getEndedClinicDrillsB8FT85M>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetEndedClinicDrillsB8FT85MQueryOptions(
    clinicId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
