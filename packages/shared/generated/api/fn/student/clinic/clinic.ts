/**
 * Generated by orval v6.24.0 🍺
 * Do not edit manually.
 * CLUS API
 * CLUS Backend API Spec
 * OpenAPI spec version: v1.0.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  GetOngoingClinicsParams,
  GetSearchedClinicMajorSubjectCount1Params,
  MajorSubjectWithClinicCountResponse,
  PathApiError,
  SearchClinics1Params,
  StudentClinicItemResponse,
  StudentClinicSummaryResponse,
  StudentClinicsDetailResponse,
  StudentEnrollmentDailyReportResponse,
  StudentOwnClinicItemResponse,
  StudentReportResponse,
  StudentSimpleClinicResponse,
} from "../../../model";
import { axiosInstance } from "../../../config/axios-instance";
import type { ErrorType } from "../../../config/axios-instance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary 수강중인 클리닉 리포트 조회하기 V2
 */
export const getReportB8FT85M = (
  clinicId: string,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<StudentReportResponse>(
    { url: `/clus/v2/clinics/${clinicId}/report`, method: "GET", signal },
    options
  );
};

export const getGetReportB8FT85MQueryKey = (clinicId: string) => {
  return [`/clus/v2/clinics/${clinicId}/report`] as const;
};

export const getGetReportB8FT85MQueryOptions = <
  TData = Awaited<ReturnType<typeof getReportB8FT85M>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getReportB8FT85M>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetReportB8FT85MQueryKey(clinicId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getReportB8FT85M>>
  > = ({ signal }) => getReportB8FT85M(clinicId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!clinicId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getReportB8FT85M>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetReportB8FT85MQueryResult = NonNullable<
  Awaited<ReturnType<typeof getReportB8FT85M>>
>;
export type GetReportB8FT85MQueryError = ErrorType<PathApiError>;

/**
 * @summary 수강중인 클리닉 리포트 조회하기 V2
 */
export const useGetReportB8FT85M = <
  TData = Awaited<ReturnType<typeof getReportB8FT85M>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getReportB8FT85M>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetReportB8FT85MQueryOptions(clinicId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary 최근 학습 클리닉 조회하기
 */
export const getRecentClinic = (
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<StudentSimpleClinicResponse>(
    { url: `/clus/recent-clinics`, method: "GET", signal },
    options
  );
};

export const getGetRecentClinicQueryKey = () => {
  return [`/clus/recent-clinics`] as const;
};

export const getGetRecentClinicQueryOptions = <
  TData = Awaited<ReturnType<typeof getRecentClinic>>,
  TError = ErrorType<PathApiError>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getRecentClinic>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRecentClinicQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRecentClinic>>> = ({
    signal,
  }) => getRecentClinic(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRecentClinic>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetRecentClinicQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRecentClinic>>
>;
export type GetRecentClinicQueryError = ErrorType<PathApiError>;

/**
 * @summary 최근 학습 클리닉 조회하기
 */
export const useGetRecentClinic = <
  TData = Awaited<ReturnType<typeof getRecentClinic>>,
  TError = ErrorType<PathApiError>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getRecentClinic>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRecentClinicQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary 진행중 클리닉 목록 조회하기
 */
export const getOngoingClinics = (
  params?: GetOngoingClinicsParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<StudentOwnClinicItemResponse[]>(
    { url: `/clus/ongoing-clinics`, method: "GET", params, signal },
    options
  );
};

export const getGetOngoingClinicsQueryKey = (
  params?: GetOngoingClinicsParams
) => {
  return [`/clus/ongoing-clinics`, ...(params ? [params] : [])] as const;
};

export const getGetOngoingClinicsQueryOptions = <
  TData = Awaited<ReturnType<typeof getOngoingClinics>>,
  TError = ErrorType<PathApiError>
>(
  params?: GetOngoingClinicsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getOngoingClinics>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetOngoingClinicsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getOngoingClinics>>
  > = ({ signal }) => getOngoingClinics(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getOngoingClinics>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetOngoingClinicsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOngoingClinics>>
>;
export type GetOngoingClinicsQueryError = ErrorType<PathApiError>;

/**
 * @summary 진행중 클리닉 목록 조회하기
 */
export const useGetOngoingClinics = <
  TData = Awaited<ReturnType<typeof getOngoingClinics>>,
  TError = ErrorType<PathApiError>
>(
  params?: GetOngoingClinicsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getOngoingClinics>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetOngoingClinicsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * 클래스 홈에서 클리닉 기본 정보와 수강기간 및 콘텐츠 진행 정보를 조회합니다.
 * @summary 클리닉 수강 요약 정보 조회하기
 */
export const getClinicSummaryB8FT85M = (
  clinicId: string,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<StudentClinicSummaryResponse>(
    { url: `/clus/clinics/${clinicId}/summary`, method: "GET", signal },
    options
  );
};

export const getGetClinicSummaryB8FT85MQueryKey = (clinicId: string) => {
  return [`/clus/clinics/${clinicId}/summary`] as const;
};

export const getGetClinicSummaryB8FT85MQueryOptions = <
  TData = Awaited<ReturnType<typeof getClinicSummaryB8FT85M>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getClinicSummaryB8FT85M>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetClinicSummaryB8FT85MQueryKey(clinicId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getClinicSummaryB8FT85M>>
  > = ({ signal }) => getClinicSummaryB8FT85M(clinicId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!clinicId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getClinicSummaryB8FT85M>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetClinicSummaryB8FT85MQueryResult = NonNullable<
  Awaited<ReturnType<typeof getClinicSummaryB8FT85M>>
>;
export type GetClinicSummaryB8FT85MQueryError = ErrorType<PathApiError>;

/**
 * @summary 클리닉 수강 요약 정보 조회하기
 */
export const useGetClinicSummaryB8FT85M = <
  TData = Awaited<ReturnType<typeof getClinicSummaryB8FT85M>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getClinicSummaryB8FT85M>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetClinicSummaryB8FT85MQueryOptions(
    clinicId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * 학생의 일별 학습 콘텐츠와 일별 학습 시간을 조회한다
 * @summary 일별 학습 진행 현황 조회하기
 */
export const getEnrollmentDailyReportB8FT85M = (
  clinicId: string,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<StudentEnrollmentDailyReportResponse>(
    {
      url: `/clus/clinics/${clinicId}/summary/progress`,
      method: "GET",
      signal,
    },
    options
  );
};

export const getGetEnrollmentDailyReportB8FT85MQueryKey = (
  clinicId: string
) => {
  return [`/clus/clinics/${clinicId}/summary/progress`] as const;
};

export const getGetEnrollmentDailyReportB8FT85MQueryOptions = <
  TData = Awaited<ReturnType<typeof getEnrollmentDailyReportB8FT85M>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getEnrollmentDailyReportB8FT85M>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetEnrollmentDailyReportB8FT85MQueryKey(clinicId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getEnrollmentDailyReportB8FT85M>>
  > = ({ signal }) =>
    getEnrollmentDailyReportB8FT85M(clinicId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!clinicId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getEnrollmentDailyReportB8FT85M>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetEnrollmentDailyReportB8FT85MQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEnrollmentDailyReportB8FT85M>>
>;
export type GetEnrollmentDailyReportB8FT85MQueryError = ErrorType<PathApiError>;

/**
 * @summary 일별 학습 진행 현황 조회하기
 */
export const useGetEnrollmentDailyReportB8FT85M = <
  TData = Awaited<ReturnType<typeof getEnrollmentDailyReportB8FT85M>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getEnrollmentDailyReportB8FT85M>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetEnrollmentDailyReportB8FT85MQueryOptions(
    clinicId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary 클리닉 상세 정보 조회하기
 */
export const getClinicDetailB8FT85M = (
  clinicId: string,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<StudentClinicsDetailResponse>(
    { url: `/clus/clinics/${clinicId}/detail`, method: "GET", signal },
    options
  );
};

export const getGetClinicDetailB8FT85MQueryKey = (clinicId: string) => {
  return [`/clus/clinics/${clinicId}/detail`] as const;
};

export const getGetClinicDetailB8FT85MQueryOptions = <
  TData = Awaited<ReturnType<typeof getClinicDetailB8FT85M>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getClinicDetailB8FT85M>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetClinicDetailB8FT85MQueryKey(clinicId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getClinicDetailB8FT85M>>
  > = ({ signal }) => getClinicDetailB8FT85M(clinicId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!clinicId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getClinicDetailB8FT85M>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetClinicDetailB8FT85MQueryResult = NonNullable<
  Awaited<ReturnType<typeof getClinicDetailB8FT85M>>
>;
export type GetClinicDetailB8FT85MQueryError = ErrorType<PathApiError>;

/**
 * @summary 클리닉 상세 정보 조회하기
 */
export const useGetClinicDetailB8FT85M = <
  TData = Awaited<ReturnType<typeof getClinicDetailB8FT85M>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getClinicDetailB8FT85M>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetClinicDetailB8FT85MQueryOptions(clinicId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary 검색한 클리닉 조회하기
 */
export const searchClinics1 = (
  params: SearchClinics1Params,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<StudentClinicItemResponse[]>(
    { url: `/clus/clinics/search`, method: "GET", params, signal },
    options
  );
};

export const getSearchClinics1QueryKey = (params: SearchClinics1Params) => {
  return [`/clus/clinics/search`, ...(params ? [params] : [])] as const;
};

export const getSearchClinics1QueryOptions = <
  TData = Awaited<ReturnType<typeof searchClinics1>>,
  TError = ErrorType<PathApiError>
>(
  params: SearchClinics1Params,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof searchClinics1>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchClinics1QueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchClinics1>>> = ({
    signal,
  }) => searchClinics1(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof searchClinics1>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SearchClinics1QueryResult = NonNullable<
  Awaited<ReturnType<typeof searchClinics1>>
>;
export type SearchClinics1QueryError = ErrorType<PathApiError>;

/**
 * @summary 검색한 클리닉 조회하기
 */
export const useSearchClinics1 = <
  TData = Awaited<ReturnType<typeof searchClinics1>>,
  TError = ErrorType<PathApiError>
>(
  params: SearchClinics1Params,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof searchClinics1>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSearchClinics1QueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary 검색한 클리닉의 대과목별 갯수 조회하기
 */
export const getSearchedClinicMajorSubjectCount1 = (
  params: GetSearchedClinicMajorSubjectCount1Params,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<MajorSubjectWithClinicCountResponse>(
    {
      url: `/clus/clinics/search/major-subjects/count`,
      method: "GET",
      params,
      signal,
    },
    options
  );
};

export const getGetSearchedClinicMajorSubjectCount1QueryKey = (
  params: GetSearchedClinicMajorSubjectCount1Params
) => {
  return [
    `/clus/clinics/search/major-subjects/count`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetSearchedClinicMajorSubjectCount1QueryOptions = <
  TData = Awaited<ReturnType<typeof getSearchedClinicMajorSubjectCount1>>,
  TError = ErrorType<PathApiError>
>(
  params: GetSearchedClinicMajorSubjectCount1Params,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getSearchedClinicMajorSubjectCount1>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetSearchedClinicMajorSubjectCount1QueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSearchedClinicMajorSubjectCount1>>
  > = ({ signal }) =>
    getSearchedClinicMajorSubjectCount1(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getSearchedClinicMajorSubjectCount1>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetSearchedClinicMajorSubjectCount1QueryResult = NonNullable<
  Awaited<ReturnType<typeof getSearchedClinicMajorSubjectCount1>>
>;
export type GetSearchedClinicMajorSubjectCount1QueryError =
  ErrorType<PathApiError>;

/**
 * @summary 검색한 클리닉의 대과목별 갯수 조회하기
 */
export const useGetSearchedClinicMajorSubjectCount1 = <
  TData = Awaited<ReturnType<typeof getSearchedClinicMajorSubjectCount1>>,
  TError = ErrorType<PathApiError>
>(
  params: GetSearchedClinicMajorSubjectCount1Params,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getSearchedClinicMajorSubjectCount1>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetSearchedClinicMajorSubjectCount1QueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
