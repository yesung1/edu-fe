/**
 * Generated by orval v6.24.0 🍺
 * Do not edit manually.
 * CLUS API
 * CLUS Backend API Spec
 * OpenAPI spec version: v1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type {
  MajorSubjectWithClinicCountResponse,
  StudentClinicItemResponse,
  StudentClinicSummaryResponse,
  StudentClinicsDetailResponse,
  StudentEnrollmentDailyReportResponse,
  StudentOwnClinicItemResponse,
  StudentReportResponse,
  StudentSimpleClinicResponse,
} from "../../../model";

export const getGetReportB8FT85MMock = (
  overrideResponse: any = {}
): StudentReportResponse => ({
  dailyCompletedContentCounts: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    contentCount: faker.number.int({ min: undefined, max: undefined }),
    date: faker.word.sample(),
    ...overrideResponse,
  })),
  dailyStudyTimes: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    date: faker.word.sample(),
    studyTime: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  })),
  drills: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    details: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      allCorrectCount: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      allQuestionCount: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      contentType: faker.helpers.arrayElement([
        "EXAM",
        "CLIP",
        "TEXTBOOK",
      ] as const),
      earnedScore: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      isCompleted: faker.datatype.boolean(),
      perfectScore: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      studiedAt: faker.word.sample(),
      studyTime: faker.number.int({ min: undefined, max: undefined }),
      title: faker.word.sample(),
      ...overrideResponse,
    })),
    endedAt: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    progress: faker.number.int({ min: undefined, max: undefined }),
    round: faker.number.int({ min: undefined, max: undefined }),
    startedAt: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
  })),
  lives: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    isCompleted: faker.datatype.boolean(),
    liveEndedAt: faker.word.sample(),
    liveStartedAt: faker.word.sample(),
    title: faker.word.sample(),
    ...overrideResponse,
  })),
  summary: {
    assignedDrillContentCount: faker.number.int({
      min: undefined,
      max: undefined,
    }),
    assignedLiveCount: faker.number.int({ min: undefined, max: undefined }),
    clinicEndedAt: faker.word.sample(),
    clinicLectureType: faker.helpers.arrayElement([
      "DRILL_CENTERED",
      "LIVE_CENTERED",
    ] as const),
    clinicStartedAt: faker.word.sample(),
    clinicTitle: faker.word.sample(),
    completedDrillContentCount: faker.number.int({
      min: undefined,
      max: undefined,
    }),
    completedLiveCount: faker.number.int({ min: undefined, max: undefined }),
    drillOpenType: faker.helpers.arrayElement([
      "ENTIRE",
      "SEQUENTIAL",
    ] as const),
    reportContent: faker.word.sample(),
    studentName: faker.word.sample(),
    studyStartedAt: faker.word.sample(),
    totalStudyTime: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  ...overrideResponse,
});

export const getGetRecentClinicMock = (
  overrideResponse: any = {}
): StudentSimpleClinicResponse => ({
  clinicId: faker.word.sample(),
  clinicProgressStep: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      "ONGOING_DRILL",
      "BEFORE_DRILL_ASSIGNED",
      "BEFORE_DRILL_LEARNED",
      "BEFORE_REPORT",
      "REPORT_RECEPTION",
      "CLINIC_COMPLETION",
      "CLINIC_EXPIRATION",
    ] as const),
    undefined,
  ]),
  majorSubject: faker.helpers.arrayElement([
    {
      code: faker.word.sample(),
      name: faker.word.sample(),
      ...overrideResponse,
    },
    undefined,
  ]),
  teacherName: faker.word.sample(),
  thumbnailImageUrl: faker.word.sample(),
  title: faker.word.sample(),
  ...overrideResponse,
});

export const getGetOngoingClinicsMock = (
  overrideResponse: any = {}
): StudentOwnClinicItemResponse[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    boardNotification: {
      message: faker.word.sample(),
      messageType: faker.helpers.arrayElement(["DEFAULT", "ALERT"] as const),
      ...overrideResponse,
    },
    clinicEndedDate: faker.helpers.arrayElement([
      faker.word.sample(),
      undefined,
    ]),
    clinicId: faker.word.sample(),
    clinicNotification: {
      message: faker.word.sample(),
      messageType: faker.helpers.arrayElement(["DEFAULT", "ALERT"] as const),
      ...overrideResponse,
    },
    clinicStartedDate: faker.word.sample(),
    majorSubject: {
      code: faker.word.sample(),
      name: faker.word.sample(),
      ...overrideResponse,
    },
    status: faker.helpers.arrayElement(["PREPARE", "OPEN", "CLOSE"] as const),
    teacherName: faker.word.sample(),
    thumbnailImageUrl: faker.word.sample(),
    title: faker.word.sample(),
    ...overrideResponse,
  }));

export const getGetClinicSummaryB8FT85MMock = (
  overrideResponse: any = {}
): StudentClinicSummaryResponse => ({
  assignedDrillContentCount: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  assignedLiveCount: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  clinicId: faker.word.sample(),
  clinicLectureType: faker.helpers.arrayElement([
    "DRILL_CENTERED",
    "LIVE_CENTERED",
  ] as const),
  clinicProgressStep: faker.helpers.arrayElement([
    "ONGOING_DRILL",
    "BEFORE_DRILL_ASSIGNED",
    "BEFORE_DRILL_LEARNED",
    "BEFORE_REPORT",
    "REPORT_RECEPTION",
    "CLINIC_COMPLETION",
    "CLINIC_EXPIRATION",
  ] as const),
  clinicScheduledEndAt: faker.word.sample(),
  clinicScheduledExpirationAt: faker.word.sample(),
  completedDrillContentCount: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  completedLiveCount: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  enrollmentPeriod: faker.number.int({ min: undefined, max: undefined }),
  majorSubject: {
    code: faker.word.sample(),
    name: faker.word.sample(),
    ...overrideResponse,
  },
  recentClinicLearnedDate: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  reviewPeriod: faker.number.int({ min: undefined, max: undefined }),
  teacherName: faker.word.sample(),
  thumbnailImageUrl: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  title: faker.word.sample(),
  totalStudyTime: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getGetEnrollmentDailyReportB8FT85MMock = (
  overrideResponse: any = {}
): StudentEnrollmentDailyReportResponse => ({
  dailyCompletedContentCounts: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    contentCount: faker.number.int({ min: undefined, max: undefined }),
    date: faker.word.sample(),
    ...overrideResponse,
  })),
  dailyStudyTimes: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    date: faker.word.sample(),
    studyTime: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  })),
  ...overrideResponse,
});

export const getGetClinicDetailB8FT85MMock = (
  overrideResponse: any = {}
): StudentClinicsDetailResponse => ({
  areas: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => faker.word.sample()),
  clinicCreationType: faker.helpers.arrayElement([
    "GRID",
    "AUTONOMOUS",
  ] as const),
  clinicGridTypeDescriptions: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    category: faker.word.sample(),
    description: faker.word.sample(),
    ...overrideResponse,
  })),
  clinicId: faker.word.sample(),
  clinicLectureType: faker.helpers.arrayElement([
    "DRILL_CENTERED",
    "LIVE_CENTERED",
  ] as const),
  clinicStep: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      "ONGOING_DRILL",
      "BEFORE_DRILL_ASSIGNED",
      "BEFORE_DRILL_LEARNED",
      "BEFORE_REPORT",
      "REPORT_RECEPTION",
      "CLINIC_COMPLETION",
      "CLINIC_EXPIRATION",
    ] as const),
    undefined,
  ]),
  coursebook: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  coursebookBgColor: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  descriptionBgColor: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  enrollmentPeriod: faker.number.int({ min: undefined, max: undefined }),
  field: faker.word.sample(),
  isShownCoursebook: faker.datatype.boolean(),
  majorSubject: {
    code: faker.word.sample(),
    name: faker.word.sample(),
    ...overrideResponse,
  },
  minorSubjects: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    code: faker.word.sample(),
    name: faker.word.sample(),
    ...overrideResponse,
  })),
  parentInfoRequirement: faker.helpers.arrayElement([
    "MANDATORY",
    "OPTIONAL",
    "NONE",
  ] as const),
  payment: faker.helpers.arrayElement([
    {
      id: faker.word.sample(),
      status: faker.helpers.arrayElement([
        "WAIT",
        "AUTO_COMPLETION",
        "MANUAL_COMPLETION",
        "CANCEL",
        "EXPIRED",
        "REFUND",
        "PARTIAL_REFUND",
        "FULL_REFUND",
        "FREE_COMPLETION",
        "FREE_CANCELLATION",
      ] as const),
      ...overrideResponse,
    },
    undefined,
  ]),
  product: {
    discountRate: faker.number.int({ min: undefined, max: undefined }),
    id: faker.word.sample(),
    isFree: faker.datatype.boolean(),
    originalPrice: faker.number.int({ min: undefined, max: undefined }),
    salePrice: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  reviewPeriod: faker.number.int({ min: undefined, max: undefined }),
  schoolGrades: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => faker.word.sample()),
  schoolYears: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => faker.word.sample()),
  status: faker.helpers.arrayElement(["PREPARE", "OPEN", "CLOSE"] as const),
  teacherCode: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  teacherName: faker.word.sample(),
  thumbnailImageUrl: faker.word.sample(),
  title: faker.word.sample(),
  workbooks: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    clinicWorkbookMapId: faker.word.sample(),
    coverImageFile: faker.helpers.arrayElement([
      {
        fileName: faker.word.sample(),
        fileSize: faker.number.int({ min: undefined, max: undefined }),
        fileUrl: faker.word.sample(),
        id: faker.word.sample(),
        ...overrideResponse,
      },
      undefined,
    ]),
    description: faker.word.sample(),
    id: faker.word.sample(),
    isFree: faker.datatype.boolean(),
    isRequired: faker.datatype.boolean(),
    majorSubject: {
      code: faker.word.sample(),
      name: faker.word.sample(),
      ...overrideResponse,
    },
    salePrice: faker.number.int({ min: undefined, max: undefined }),
    tags: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    title: faker.word.sample(),
    workbookStatus: faker.helpers.arrayElement([
      "BEFORE_SALE",
      "ON_SALE",
      "SALE_COMPLETION",
    ] as const),
    workbookType: faker.helpers.arrayElement(["MAJOR", "MINOR"] as const),
    workbookVolumeCount: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  })),
  ...overrideResponse,
});

export const getSearchClinics1Mock = (
  overrideResponse: any = {}
): StudentClinicItemResponse[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    areas: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    clinicId: faker.word.sample(),
    clinicProgressStep: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        "ONGOING_DRILL",
        "BEFORE_DRILL_ASSIGNED",
        "BEFORE_DRILL_LEARNED",
        "BEFORE_REPORT",
        "REPORT_RECEPTION",
        "CLINIC_COMPLETION",
        "CLINIC_EXPIRATION",
      ] as const),
      undefined,
    ]),
    field: faker.word.sample(),
    majorSubject: {
      code: faker.word.sample(),
      name: faker.word.sample(),
      ...overrideResponse,
    },
    minorSubjects: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      code: faker.word.sample(),
      name: faker.word.sample(),
      ...overrideResponse,
    })),
    schoolGrades: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    schoolYears: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    status: faker.word.sample(),
    teacherName: faker.word.sample(),
    thumbnailImageUrl: faker.word.sample(),
    title: faker.word.sample(),
    ...overrideResponse,
  }));

export const getGetSearchedClinicMajorSubjectCount1Mock = (
  overrideResponse: any = {}
): MajorSubjectWithClinicCountResponse => ({
  majorSubjects: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    count: faker.number.int({ min: undefined, max: undefined }),
    majorSubject: {
      code: faker.word.sample(),
      name: faker.word.sample(),
      ...overrideResponse,
    },
    ...overrideResponse,
  })),
  totalCount: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getGetReportB8FT85MMockHandler = (
  overrideResponse?: StudentReportResponse
) => {
  return http.get("*/clus/v2/clinics/:clinicId/report", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetReportB8FT85MMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getGetRecentClinicMockHandler = (
  overrideResponse?: StudentSimpleClinicResponse
) => {
  return http.get("*/clus/recent-clinics", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetRecentClinicMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getGetOngoingClinicsMockHandler = (
  overrideResponse?: StudentOwnClinicItemResponse[]
) => {
  return http.get("*/clus/ongoing-clinics", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetOngoingClinicsMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getGetClinicSummaryB8FT85MMockHandler = (
  overrideResponse?: StudentClinicSummaryResponse
) => {
  return http.get("*/clus/clinics/:clinicId/summary", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetClinicSummaryB8FT85MMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getGetEnrollmentDailyReportB8FT85MMockHandler = (
  overrideResponse?: StudentEnrollmentDailyReportResponse
) => {
  return http.get("*/clus/clinics/:clinicId/summary/progress", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetEnrollmentDailyReportB8FT85MMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getGetClinicDetailB8FT85MMockHandler = (
  overrideResponse?: StudentClinicsDetailResponse
) => {
  return http.get("*/clus/clinics/:clinicId/detail", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetClinicDetailB8FT85MMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getSearchClinics1MockHandler = (
  overrideResponse?: StudentClinicItemResponse[]
) => {
  return http.get("*/clus/clinics/search", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSearchClinics1Mock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getGetSearchedClinicMajorSubjectCount1MockHandler = (
  overrideResponse?: MajorSubjectWithClinicCountResponse
) => {
  return http.get("*/clus/clinics/search/major-subjects/count", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetSearchedClinicMajorSubjectCount1Mock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};
export const getClinicMock = () => [
  getGetReportB8FT85MMockHandler(),
  getGetRecentClinicMockHandler(),
  getGetOngoingClinicsMockHandler(),
  getGetClinicSummaryB8FT85MMockHandler(),
  getGetEnrollmentDailyReportB8FT85MMockHandler(),
  getGetClinicDetailB8FT85MMockHandler(),
  getSearchClinics1MockHandler(),
  getGetSearchedClinicMajorSubjectCount1MockHandler(),
];
