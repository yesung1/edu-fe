/**
 * Generated by orval v6.24.0 üç∫
 * Do not edit manually.
 * CLUS API
 * CLUS Backend API Spec
 * OpenAPI spec version: v1.0.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  GetCurationBannersParams,
  GetCurationRecommendationClinicParams,
  GetEventCommentsFhU46a4Params,
  GetEventsParams,
  GetModalsParams,
  GetPopularClinicsParams,
  GetSearchedClinicMajorSubjectCountParams,
  GetSeoParams,
  MajorSubjectWithClinicCountResponse,
  PagePublicCurationBannerItemResponse,
  PagePublicEventCommentResponse,
  PagePublicEventItemResponse,
  PagePublicModalItemResponse,
  PathApiError,
  PublicBannersResponse,
  PublicClinicsDetailResponse,
  PublicEventDetailResponse,
  SearchClinicsParams,
  SeoDataResponse,
  StudentClinicItemResponse,
  StudentCurationPopularTeacherResponse,
  StudentCurationRecommendationClinicResponse,
  StudentSimpleClinicResponse,
  TeacherIntroductionBySubjectItemResponse,
} from "../../../model";
import { axiosInstance } from "../../../config/axios-instance";
import type { ErrorType } from "../../../config/axios-instance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary Í≥ºÎ™©Î≥Ñ Í∞ïÏÇ¨ Î™©Î°ù Ï°∞ÌöåÌïòÍ∏∞
 */
export const getTeacherIntroductionsBySubject = (
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<TeacherIntroductionBySubjectItemResponse[]>(
    { url: `/clus/v2/public/teachers`, method: "GET", signal },
    options
  );
};

export const getGetTeacherIntroductionsBySubjectQueryKey = () => {
  return [`/clus/v2/public/teachers`] as const;
};

export const getGetTeacherIntroductionsBySubjectQueryOptions = <
  TData = Awaited<ReturnType<typeof getTeacherIntroductionsBySubject>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getTeacherIntroductionsBySubject>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTeacherIntroductionsBySubjectQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTeacherIntroductionsBySubject>>
  > = ({ signal }) => getTeacherIntroductionsBySubject(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTeacherIntroductionsBySubject>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetTeacherIntroductionsBySubjectQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeacherIntroductionsBySubject>>
>;
export type GetTeacherIntroductionsBySubjectQueryError = ErrorType<unknown>;

/**
 * @summary Í≥ºÎ™©Î≥Ñ Í∞ïÏÇ¨ Î™©Î°ù Ï°∞ÌöåÌïòÍ∏∞
 */
export const useGetTeacherIntroductionsBySubject = <
  TData = Awaited<ReturnType<typeof getTeacherIntroductionsBySubject>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getTeacherIntroductionsBySubject>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTeacherIntroductionsBySubjectQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary SEO Ï†ïÎ≥¥ ÏÉÅÏÑ∏ Ï°∞ÌöåÌïòÍ∏∞
 */
export const getSeo = (
  params: GetSeoParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<SeoDataResponse>(
    { url: `/clus/public/seo/detail`, method: "GET", params, signal },
    options
  );
};

export const getGetSeoQueryKey = (params: GetSeoParams) => {
  return [`/clus/public/seo/detail`, ...(params ? [params] : [])] as const;
};

export const getGetSeoQueryOptions = <
  TData = Awaited<ReturnType<typeof getSeo>>,
  TError = ErrorType<PathApiError>
>(
  params: GetSeoParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getSeo>>, TError, TData>;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSeoQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSeo>>> = ({
    signal,
  }) => getSeo(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getSeo>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetSeoQueryResult = NonNullable<Awaited<ReturnType<typeof getSeo>>>;
export type GetSeoQueryError = ErrorType<PathApiError>;

/**
 * @summary SEO Ï†ïÎ≥¥ ÏÉÅÏÑ∏ Ï°∞ÌöåÌïòÍ∏∞
 */
export const useGetSeo = <
  TData = Awaited<ReturnType<typeof getSeo>>,
  TError = ErrorType<PathApiError>
>(
  params: GetSeoParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getSeo>>, TError, TData>;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetSeoQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Î™®Îã¨ Î™©Î°ù Ï°∞ÌöåÌïòÍ∏∞
 */
export const getModals = (
  params?: GetModalsParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<PagePublicModalItemResponse>(
    { url: `/clus/public/modals`, method: "GET", params, signal },
    options
  );
};

export const getGetModalsQueryKey = (params?: GetModalsParams) => {
  return [`/clus/public/modals`, ...(params ? [params] : [])] as const;
};

export const getGetModalsQueryOptions = <
  TData = Awaited<ReturnType<typeof getModals>>,
  TError = ErrorType<PathApiError>
>(
  params?: GetModalsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getModals>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetModalsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getModals>>> = ({
    signal,
  }) => getModals(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getModals>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetModalsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getModals>>
>;
export type GetModalsQueryError = ErrorType<PathApiError>;

/**
 * @summary Î™®Îã¨ Î™©Î°ù Ï°∞ÌöåÌïòÍ∏∞
 */
export const useGetModals = <
  TData = Awaited<ReturnType<typeof getModals>>,
  TError = ErrorType<PathApiError>
>(
  params?: GetModalsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getModals>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetModalsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Ï†ïÎ†¨ Ï°∞Í±¥ - CREATED_AT, STARTED_AT | ASC, DESC, Í∏∞Î≥∏Í∞í : Í≤åÏãúÏùº ÎÇ¥Î¶ºÏ∞®Ïàú
 * @summary Ïù¥Î≤§Ìä∏ Î™©Î°ù Ï°∞ÌöåÌïòÍ∏∞
 */
export const getEvents = (
  params?: GetEventsParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<PagePublicEventItemResponse>(
    { url: `/clus/public/events`, method: "GET", params, signal },
    options
  );
};

export const getGetEventsQueryKey = (params?: GetEventsParams) => {
  return [`/clus/public/events`, ...(params ? [params] : [])] as const;
};

export const getGetEventsQueryOptions = <
  TData = Awaited<ReturnType<typeof getEvents>>,
  TError = ErrorType<PathApiError>
>(
  params?: GetEventsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getEvents>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEventsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEvents>>> = ({
    signal,
  }) => getEvents(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEvents>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetEventsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEvents>>
>;
export type GetEventsQueryError = ErrorType<PathApiError>;

/**
 * @summary Ïù¥Î≤§Ìä∏ Î™©Î°ù Ï°∞ÌöåÌïòÍ∏∞
 */
export const useGetEvents = <
  TData = Awaited<ReturnType<typeof getEvents>>,
  TError = ErrorType<PathApiError>
>(
  params?: GetEventsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getEvents>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetEventsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Ïù¥Î≤§Ìä∏ ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞ÌöåÌïòÍ∏∞
 */
export const getEventDetailReu8Kms = (
  eventId: string,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<PublicEventDetailResponse>(
    { url: `/clus/public/events/${eventId}`, method: "GET", signal },
    options
  );
};

export const getGetEventDetailReu8KmsQueryKey = (eventId: string) => {
  return [`/clus/public/events/${eventId}`] as const;
};

export const getGetEventDetailReu8KmsQueryOptions = <
  TData = Awaited<ReturnType<typeof getEventDetailReu8Kms>>,
  TError = ErrorType<PathApiError>
>(
  eventId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getEventDetailReu8Kms>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetEventDetailReu8KmsQueryKey(eventId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getEventDetailReu8Kms>>
  > = ({ signal }) => getEventDetailReu8Kms(eventId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!eventId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getEventDetailReu8Kms>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetEventDetailReu8KmsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEventDetailReu8Kms>>
>;
export type GetEventDetailReu8KmsQueryError = ErrorType<PathApiError>;

/**
 * @summary Ïù¥Î≤§Ìä∏ ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞ÌöåÌïòÍ∏∞
 */
export const useGetEventDetailReu8Kms = <
  TData = Awaited<ReturnType<typeof getEventDetailReu8Kms>>,
  TError = ErrorType<PathApiError>
>(
  eventId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getEventDetailReu8Kms>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetEventDetailReu8KmsQueryOptions(eventId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Ïù¥Î≤§Ìä∏ ÎåìÍ∏Ä Î™©Î°ù Ï°∞ÌöåÌïòÍ∏∞
 */
export const getEventCommentsFhU46a4 = (
  eventId: string,
  params?: GetEventCommentsFhU46a4Params,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<PagePublicEventCommentResponse>(
    {
      url: `/clus/public/events/${eventId}/comments`,
      method: "GET",
      params,
      signal,
    },
    options
  );
};

export const getGetEventCommentsFhU46a4QueryKey = (
  eventId: string,
  params?: GetEventCommentsFhU46a4Params
) => {
  return [
    `/clus/public/events/${eventId}/comments`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetEventCommentsFhU46a4QueryOptions = <
  TData = Awaited<ReturnType<typeof getEventCommentsFhU46a4>>,
  TError = ErrorType<PathApiError>
>(
  eventId: string,
  params?: GetEventCommentsFhU46a4Params,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getEventCommentsFhU46a4>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetEventCommentsFhU46a4QueryKey(eventId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getEventCommentsFhU46a4>>
  > = ({ signal }) =>
    getEventCommentsFhU46a4(eventId, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!eventId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getEventCommentsFhU46a4>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetEventCommentsFhU46a4QueryResult = NonNullable<
  Awaited<ReturnType<typeof getEventCommentsFhU46a4>>
>;
export type GetEventCommentsFhU46a4QueryError = ErrorType<PathApiError>;

/**
 * @summary Ïù¥Î≤§Ìä∏ ÎåìÍ∏Ä Î™©Î°ù Ï°∞ÌöåÌïòÍ∏∞
 */
export const useGetEventCommentsFhU46a4 = <
  TData = Awaited<ReturnType<typeof getEventCommentsFhU46a4>>,
  TError = ErrorType<PathApiError>
>(
  eventId: string,
  params?: GetEventCommentsFhU46a4Params,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getEventCommentsFhU46a4>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetEventCommentsFhU46a4QueryOptions(
    eventId,
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary ÌÅêÎ†àÏù¥ÏÖò Ï∂îÏ≤ú ÌÅ¥ÎûòÏä§ Ï°∞ÌöåÌïòÍ∏∞
 */
export const getCurationRecommendationClinic = (
  params?: GetCurationRecommendationClinicParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<StudentCurationRecommendationClinicResponse[]>(
    {
      url: `/clus/public/curation/recommendation-clinics`,
      method: "GET",
      params,
      signal,
    },
    options
  );
};

export const getGetCurationRecommendationClinicQueryKey = (
  params?: GetCurationRecommendationClinicParams
) => {
  return [
    `/clus/public/curation/recommendation-clinics`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetCurationRecommendationClinicQueryOptions = <
  TData = Awaited<ReturnType<typeof getCurationRecommendationClinic>>,
  TError = ErrorType<PathApiError>
>(
  params?: GetCurationRecommendationClinicParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCurationRecommendationClinic>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetCurationRecommendationClinicQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCurationRecommendationClinic>>
  > = ({ signal }) =>
    getCurationRecommendationClinic(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCurationRecommendationClinic>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCurationRecommendationClinicQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCurationRecommendationClinic>>
>;
export type GetCurationRecommendationClinicQueryError = ErrorType<PathApiError>;

/**
 * @summary ÌÅêÎ†àÏù¥ÏÖò Ï∂îÏ≤ú ÌÅ¥ÎûòÏä§ Ï°∞ÌöåÌïòÍ∏∞
 */
export const useGetCurationRecommendationClinic = <
  TData = Awaited<ReturnType<typeof getCurationRecommendationClinic>>,
  TError = ErrorType<PathApiError>
>(
  params?: GetCurationRecommendationClinicParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCurationRecommendationClinic>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCurationRecommendationClinicQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary ÌÅêÎ†àÏù¥ÏÖò Ïù∏Í∏∞ ÏÑ†ÏÉùÎãò Ï°∞ÌöåÌïòÍ∏∞
 */
export const getPopularTeachers = (
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<StudentCurationPopularTeacherResponse[]>(
    { url: `/clus/public/curation/popular-teachers`, method: "GET", signal },
    options
  );
};

export const getGetPopularTeachersQueryKey = () => {
  return [`/clus/public/curation/popular-teachers`] as const;
};

export const getGetPopularTeachersQueryOptions = <
  TData = Awaited<ReturnType<typeof getPopularTeachers>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getPopularTeachers>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPopularTeachersQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPopularTeachers>>
  > = ({ signal }) => getPopularTeachers(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPopularTeachers>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPopularTeachersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPopularTeachers>>
>;
export type GetPopularTeachersQueryError = ErrorType<unknown>;

/**
 * @summary ÌÅêÎ†àÏù¥ÏÖò Ïù∏Í∏∞ ÏÑ†ÏÉùÎãò Ï°∞ÌöåÌïòÍ∏∞
 */
export const useGetPopularTeachers = <
  TData = Awaited<ReturnType<typeof getPopularTeachers>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getPopularTeachers>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPopularTeachersQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary ÌÅêÎ†àÏù¥ÏÖò Ïù∏Í∏∞ ÌÅ¥ÎûòÏä§ Ï°∞ÌöåÌïòÍ∏∞
 */
export const getPopularClinics = (
  params?: GetPopularClinicsParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<StudentSimpleClinicResponse[]>(
    {
      url: `/clus/public/curation/popular-clinics`,
      method: "GET",
      params,
      signal,
    },
    options
  );
};

export const getGetPopularClinicsQueryKey = (
  params?: GetPopularClinicsParams
) => {
  return [
    `/clus/public/curation/popular-clinics`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetPopularClinicsQueryOptions = <
  TData = Awaited<ReturnType<typeof getPopularClinics>>,
  TError = ErrorType<PathApiError>
>(
  params?: GetPopularClinicsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getPopularClinics>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPopularClinicsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPopularClinics>>
  > = ({ signal }) => getPopularClinics(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPopularClinics>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPopularClinicsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPopularClinics>>
>;
export type GetPopularClinicsQueryError = ErrorType<PathApiError>;

/**
 * @summary ÌÅêÎ†àÏù¥ÏÖò Ïù∏Í∏∞ ÌÅ¥ÎûòÏä§ Ï°∞ÌöåÌïòÍ∏∞
 */
export const useGetPopularClinics = <
  TData = Awaited<ReturnType<typeof getPopularClinics>>,
  TError = ErrorType<PathApiError>
>(
  params?: GetPopularClinicsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getPopularClinics>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPopularClinicsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary ÏÉÅÎã® Î∞∞ÎÑà Î™©Î°ù Ï°∞ÌöåÌïòÍ∏∞
 */
export const getCurationBanners = (
  params?: GetCurationBannersParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<PagePublicCurationBannerItemResponse>(
    { url: `/clus/public/curation-banners`, method: "GET", params, signal },
    options
  );
};

export const getGetCurationBannersQueryKey = (
  params?: GetCurationBannersParams
) => {
  return [
    `/clus/public/curation-banners`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetCurationBannersQueryOptions = <
  TData = Awaited<ReturnType<typeof getCurationBanners>>,
  TError = ErrorType<PathApiError>
>(
  params?: GetCurationBannersParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCurationBanners>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCurationBannersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCurationBanners>>
  > = ({ signal }) => getCurationBanners(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCurationBanners>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCurationBannersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCurationBanners>>
>;
export type GetCurationBannersQueryError = ErrorType<PathApiError>;

/**
 * @summary ÏÉÅÎã® Î∞∞ÎÑà Î™©Î°ù Ï°∞ÌöåÌïòÍ∏∞
 */
export const useGetCurationBanners = <
  TData = Awaited<ReturnType<typeof getCurationBanners>>,
  TError = ErrorType<PathApiError>
>(
  params?: GetCurationBannersParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCurationBanners>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCurationBannersQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary ÌÅ¥Î¶¨Îãâ ÎëòÎü¨Î≥¥Í∏∞ - ÌÅ¥Î¶¨Îãâ ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞ÌöåÌïòÍ∏∞
 */
export const getClinicLOdYCdo = (
  clinicId: string,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<PublicClinicsDetailResponse>(
    { url: `/clus/public/clinics/${clinicId}`, method: "GET", signal },
    options
  );
};

export const getGetClinicLOdYCdoQueryKey = (clinicId: string) => {
  return [`/clus/public/clinics/${clinicId}`] as const;
};

export const getGetClinicLOdYCdoQueryOptions = <
  TData = Awaited<ReturnType<typeof getClinicLOdYCdo>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getClinicLOdYCdo>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetClinicLOdYCdoQueryKey(clinicId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getClinicLOdYCdo>>
  > = ({ signal }) => getClinicLOdYCdo(clinicId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!clinicId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getClinicLOdYCdo>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetClinicLOdYCdoQueryResult = NonNullable<
  Awaited<ReturnType<typeof getClinicLOdYCdo>>
>;
export type GetClinicLOdYCdoQueryError = ErrorType<PathApiError>;

/**
 * @summary ÌÅ¥Î¶¨Îãâ ÎëòÎü¨Î≥¥Í∏∞ - ÌÅ¥Î¶¨Îãâ ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞ÌöåÌïòÍ∏∞
 */
export const useGetClinicLOdYCdo = <
  TData = Awaited<ReturnType<typeof getClinicLOdYCdo>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getClinicLOdYCdo>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetClinicLOdYCdoQueryOptions(clinicId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary ÌÅ¥Î¶¨Îãâ ÎëòÎü¨Î≥¥Í∏∞ - ÌÅ¥Î¶¨Îãâ Í≤ÄÏÉâÌïòÍ∏∞
 */
export const searchClinics = (
  params: SearchClinicsParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<StudentClinicItemResponse[]>(
    { url: `/clus/public/clinics/search`, method: "GET", params, signal },
    options
  );
};

export const getSearchClinicsQueryKey = (params: SearchClinicsParams) => {
  return [`/clus/public/clinics/search`, ...(params ? [params] : [])] as const;
};

export const getSearchClinicsQueryOptions = <
  TData = Awaited<ReturnType<typeof searchClinics>>,
  TError = ErrorType<unknown>
>(
  params: SearchClinicsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof searchClinics>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchClinicsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchClinics>>> = ({
    signal,
  }) => searchClinics(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof searchClinics>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SearchClinicsQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchClinics>>
>;
export type SearchClinicsQueryError = ErrorType<unknown>;

/**
 * @summary ÌÅ¥Î¶¨Îãâ ÎëòÎü¨Î≥¥Í∏∞ - ÌÅ¥Î¶¨Îãâ Í≤ÄÏÉâÌïòÍ∏∞
 */
export const useSearchClinics = <
  TData = Awaited<ReturnType<typeof searchClinics>>,
  TError = ErrorType<unknown>
>(
  params: SearchClinicsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof searchClinics>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSearchClinicsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary ÌÅ¥Î¶¨Îãâ ÎëòÎü¨Î≥¥Í∏∞ - Í≤ÄÏÉâÌïú ÌÅ¥Î¶¨ÎãâÏùò ÎåÄÍ≥ºÎ™©Î≥Ñ Í∞ØÏàò Ï°∞ÌöåÌïòÍ∏∞
 */
export const getSearchedClinicMajorSubjectCount = (
  params: GetSearchedClinicMajorSubjectCountParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<MajorSubjectWithClinicCountResponse>(
    {
      url: `/clus/public/clinics/search/major-subjects/count`,
      method: "GET",
      params,
      signal,
    },
    options
  );
};

export const getGetSearchedClinicMajorSubjectCountQueryKey = (
  params: GetSearchedClinicMajorSubjectCountParams
) => {
  return [
    `/clus/public/clinics/search/major-subjects/count`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetSearchedClinicMajorSubjectCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getSearchedClinicMajorSubjectCount>>,
  TError = ErrorType<unknown>
>(
  params: GetSearchedClinicMajorSubjectCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getSearchedClinicMajorSubjectCount>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetSearchedClinicMajorSubjectCountQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSearchedClinicMajorSubjectCount>>
  > = ({ signal }) =>
    getSearchedClinicMajorSubjectCount(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getSearchedClinicMajorSubjectCount>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetSearchedClinicMajorSubjectCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSearchedClinicMajorSubjectCount>>
>;
export type GetSearchedClinicMajorSubjectCountQueryError = ErrorType<unknown>;

/**
 * @summary ÌÅ¥Î¶¨Îãâ ÎëòÎü¨Î≥¥Í∏∞ - Í≤ÄÏÉâÌïú ÌÅ¥Î¶¨ÎãâÏùò ÎåÄÍ≥ºÎ™©Î≥Ñ Í∞ØÏàò Ï°∞ÌöåÌïòÍ∏∞
 */
export const useGetSearchedClinicMajorSubjectCount = <
  TData = Awaited<ReturnType<typeof getSearchedClinicMajorSubjectCount>>,
  TError = ErrorType<unknown>
>(
  params: GetSearchedClinicMajorSubjectCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getSearchedClinicMajorSubjectCount>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetSearchedClinicMajorSubjectCountQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Îù†Î∞∞ÎÑà Ï†ïÎ≥¥ Ï°∞ÌöåÌïòÍ∏∞
 */
export const getBanners = (
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<PublicBannersResponse>(
    { url: `/clus/public/banners`, method: "GET", signal },
    options
  );
};

export const getGetBannersQueryKey = () => {
  return [`/clus/public/banners`] as const;
};

export const getGetBannersQueryOptions = <
  TData = Awaited<ReturnType<typeof getBanners>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getBanners>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetBannersQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getBanners>>> = ({
    signal,
  }) => getBanners(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getBanners>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetBannersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getBanners>>
>;
export type GetBannersQueryError = ErrorType<unknown>;

/**
 * @summary Îù†Î∞∞ÎÑà Ï†ïÎ≥¥ Ï°∞ÌöåÌïòÍ∏∞
 */
export const useGetBanners = <
  TData = Awaited<ReturnType<typeof getBanners>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getBanners>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetBannersQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
