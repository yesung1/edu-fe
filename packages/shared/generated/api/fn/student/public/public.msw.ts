/**
 * Generated by orval v6.24.0 🍺
 * Do not edit manually.
 * CLUS API
 * CLUS Backend API Spec
 * OpenAPI spec version: v1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type {
  MajorSubjectWithClinicCountResponse,
  PagePublicCurationBannerItemResponse,
  PagePublicEventCommentResponse,
  PagePublicEventItemResponse,
  PagePublicModalItemResponse,
  PublicBannersResponse,
  PublicClinicsDetailResponse,
  PublicEventDetailResponse,
  SeoDataResponse,
  StudentClinicItemResponse,
  StudentCurationPopularTeacherResponse,
  StudentCurationRecommendationClinicResponse,
  StudentSimpleClinicResponse,
  TeacherIntroductionBySubjectItemResponse,
} from "../../../model";

export const getGetTeacherIntroductionsBySubjectMock = (
  overrideResponse: any = {}
): TeacherIntroductionBySubjectItemResponse[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    majorSubject: {
      code: faker.word.sample(),
      name: faker.word.sample(),
      ...overrideResponse,
    },
    teachers: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      contentShowOrder: faker.number.int({ min: undefined, max: undefined }),
      teacherCode: faker.word.sample(),
      teacherId: faker.word.sample(),
      teacherName: faker.word.sample(),
      thumbnailImageUrl: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      ...overrideResponse,
    })),
    ...overrideResponse,
  }));

export const getGetSeoMock = (overrideResponse: any = {}): SeoDataResponse => ({
  data: {
    [faker.string.alphanumeric(5)]: faker.word.sample(),
  },
  seoType: faker.word.sample(),
  ...overrideResponse,
});

export const getGetModalsMock = (
  overrideResponse: any = {}
): PagePublicModalItemResponse => ({
  content: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      id: faker.word.sample(),
      isLinkConnected: faker.datatype.boolean(),
      linkLaunchType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["CURRENT_TAB", "NEW_TAB"] as const),
        undefined,
      ]),
      linkUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      mobileImage: {
        fileName: faker.word.sample(),
        fileSize: faker.number.int({ min: undefined, max: undefined }),
        fileUrl: faker.word.sample(),
        id: faker.word.sample(),
        ...overrideResponse,
      },
      pcImage: {
        fileName: faker.word.sample(),
        fileSize: faker.number.int({ min: undefined, max: undefined }),
        fileUrl: faker.word.sample(),
        id: faker.word.sample(),
        ...overrideResponse,
      },
      ...overrideResponse,
    })),
    undefined,
  ]),
  empty: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  first: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  last: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  number: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  numberOfElements: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  pageable: faker.helpers.arrayElement([
    {
      offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      paged: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      pageNumber: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      pageSize: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      sort: faker.helpers.arrayElement([
        {
          empty: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          sorted: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          unsorted: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      unpaged: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  size: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  sort: faker.helpers.arrayElement([
    {
      empty: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      sorted: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      unsorted: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  totalElements: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalPages: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetEventsMock = (
  overrideResponse: any = {}
): PagePublicEventItemResponse => ({
  content: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      endedDate: faker.word.sample(),
      eventType: faker.word.sample(),
      id: faker.word.sample(),
      name: faker.word.sample(),
      publishingStatus: faker.word.sample(),
      startedDate: faker.word.sample(),
      thumbnailImage: {
        fileName: faker.word.sample(),
        fileSize: faker.number.int({ min: undefined, max: undefined }),
        fileUrl: faker.word.sample(),
        id: faker.word.sample(),
        ...overrideResponse,
      },
      ...overrideResponse,
    })),
    undefined,
  ]),
  empty: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  first: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  last: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  number: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  numberOfElements: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  pageable: faker.helpers.arrayElement([
    {
      offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      paged: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      pageNumber: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      pageSize: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      sort: faker.helpers.arrayElement([
        {
          empty: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          sorted: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          unsorted: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      unpaged: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  size: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  sort: faker.helpers.arrayElement([
    {
      empty: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      sorted: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      unsorted: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  totalElements: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalPages: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetEventDetailReu8KmsMock = (
  overrideResponse: any = {}
): PublicEventDetailResponse => ({
  attachmentFiles: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    fileName: faker.word.sample(),
    fileSize: faker.number.int({ min: undefined, max: undefined }),
    fileUrl: faker.word.sample(),
    id: faker.word.sample(),
    ...overrideResponse,
  })),
  content: faker.word.sample(),
  endedAt: faker.word.sample(),
  id: faker.word.sample(),
  isCommentActivated: faker.datatype.boolean(),
  isShownConsultationRequest: faker.datatype.boolean(),
  name: faker.word.sample(),
  notice: faker.helpers.arrayElement([
    {
      content: faker.word.sample(),
      createdAt: faker.word.sample(),
      name: faker.word.sample(),
      ...overrideResponse,
    },
    undefined,
  ]),
  publishingStatus: faker.word.sample(),
  startedAt: faker.word.sample(),
  ...overrideResponse,
});

export const getGetEventCommentsFhU46a4Mock = (
  overrideResponse: any = {}
): PagePublicEventCommentResponse => ({
  content: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      authorUser: {
        name: faker.word.sample(),
        userId: faker.word.sample(),
        userType: faker.helpers.arrayElement(["STUDENT", "ADMIN"] as const),
        ...overrideResponse,
      },
      content: faker.word.sample(),
      createdAt: faker.word.sample(),
      id: faker.word.sample(),
      ...overrideResponse,
    })),
    undefined,
  ]),
  empty: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  first: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  last: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  number: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  numberOfElements: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  pageable: faker.helpers.arrayElement([
    {
      offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      paged: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      pageNumber: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      pageSize: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      sort: faker.helpers.arrayElement([
        {
          empty: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          sorted: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          unsorted: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      unpaged: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  size: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  sort: faker.helpers.arrayElement([
    {
      empty: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      sorted: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      unsorted: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  totalElements: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalPages: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetCurationRecommendationClinicMock = (
  overrideResponse: any = {}
): StudentCurationRecommendationClinicResponse[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    clinics: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      clinicId: faker.word.sample(),
      clinicProgressStep: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "ONGOING_DRILL",
          "BEFORE_DRILL_ASSIGNED",
          "BEFORE_DRILL_LEARNED",
          "BEFORE_REPORT",
          "REPORT_RECEPTION",
          "CLINIC_COMPLETION",
          "CLINIC_EXPIRATION",
        ] as const),
        undefined,
      ]),
      majorSubject: faker.helpers.arrayElement([
        {
          code: faker.word.sample(),
          name: faker.word.sample(),
          ...overrideResponse,
        },
        undefined,
      ]),
      teacherName: faker.word.sample(),
      thumbnailImageUrl: faker.word.sample(),
      title: faker.word.sample(),
      ...overrideResponse,
    })),
    curationRecommendationClinicSchoolYear: faker.helpers.arrayElement([
      "ALL",
      "MIDDLE_SCHOOL_THIRD_YEAR",
      "HIGH_SCHOOL_FIRST_YEAR",
      "HIGH_SCHOOL_SECOND_YEAR",
      "HIGH_SCHOOL_THIRD_YEAR",
      "REPEATER",
    ] as const),
    title: faker.word.sample(),
    ...overrideResponse,
  }));

export const getGetPopularTeachersMock = (
  overrideResponse: any = {}
): StudentCurationPopularTeacherResponse[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    teacherCode: faker.word.sample(),
    teacherId: faker.word.sample(),
    thumbnailImageUrl: faker.word.sample(),
    ...overrideResponse,
  }));

export const getGetPopularClinicsMock = (
  overrideResponse: any = {}
): StudentSimpleClinicResponse[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    clinicId: faker.word.sample(),
    clinicProgressStep: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        "ONGOING_DRILL",
        "BEFORE_DRILL_ASSIGNED",
        "BEFORE_DRILL_LEARNED",
        "BEFORE_REPORT",
        "REPORT_RECEPTION",
        "CLINIC_COMPLETION",
        "CLINIC_EXPIRATION",
      ] as const),
      undefined,
    ]),
    majorSubject: faker.helpers.arrayElement([
      {
        code: faker.word.sample(),
        name: faker.word.sample(),
        ...overrideResponse,
      },
      undefined,
    ]),
    teacherName: faker.word.sample(),
    thumbnailImageUrl: faker.word.sample(),
    title: faker.word.sample(),
    ...overrideResponse,
  }));

export const getGetCurationBannersMock = (
  overrideResponse: any = {}
): PagePublicCurationBannerItemResponse => ({
  content: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      curationBannerType: faker.word.sample(),
      id: faker.word.sample(),
      isLinkConnected: faker.datatype.boolean(),
      linkLaunchType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["CURRENT_TAB", "NEW_TAB"] as const),
        undefined,
      ]),
      linkUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      name: faker.word.sample(),
      thumbnailImage: {
        fileName: faker.word.sample(),
        fileSize: faker.number.int({ min: undefined, max: undefined }),
        fileUrl: faker.word.sample(),
        id: faker.word.sample(),
        ...overrideResponse,
      },
      ...overrideResponse,
    })),
    undefined,
  ]),
  empty: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  first: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  last: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  number: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  numberOfElements: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  pageable: faker.helpers.arrayElement([
    {
      offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      paged: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      pageNumber: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      pageSize: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      sort: faker.helpers.arrayElement([
        {
          empty: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          sorted: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          unsorted: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      unpaged: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  size: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  sort: faker.helpers.arrayElement([
    {
      empty: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      sorted: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      unsorted: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  totalElements: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalPages: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetClinicLOdYCdoMock = (
  overrideResponse: any = {}
): PublicClinicsDetailResponse => ({
  areas: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => faker.word.sample()),
  clinicCreationType: faker.helpers.arrayElement([
    "GRID",
    "AUTONOMOUS",
  ] as const),
  clinicGridTypeDescriptions: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    category: faker.word.sample(),
    description: faker.word.sample(),
    ...overrideResponse,
  })),
  clinicId: faker.word.sample(),
  clinicLectureType: faker.helpers.arrayElement([
    "DRILL_CENTERED",
    "LIVE_CENTERED",
  ] as const),
  coursebook: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  coursebookBgColor: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  descriptionBgColor: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  enrollmentPeriod: faker.number.int({ min: undefined, max: undefined }),
  field: faker.word.sample(),
  isShownCoursebook: faker.datatype.boolean(),
  majorSubject: {
    code: faker.word.sample(),
    name: faker.word.sample(),
    ...overrideResponse,
  },
  minorSubjects: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    code: faker.word.sample(),
    name: faker.word.sample(),
    ...overrideResponse,
  })),
  parentInfoRequirement: faker.helpers.arrayElement([
    "MANDATORY",
    "OPTIONAL",
    "NONE",
  ] as const),
  product: {
    discountRate: faker.number.int({ min: undefined, max: undefined }),
    id: faker.word.sample(),
    isFree: faker.datatype.boolean(),
    originalPrice: faker.number.int({ min: undefined, max: undefined }),
    salePrice: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  reviewPeriod: faker.number.int({ min: undefined, max: undefined }),
  schoolGrades: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => faker.word.sample()),
  schoolYears: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => faker.word.sample()),
  status: faker.helpers.arrayElement(["PREPARE", "OPEN", "CLOSE"] as const),
  teacherCode: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  teacherName: faker.word.sample(),
  thumbnailImageUrl: faker.word.sample(),
  title: faker.word.sample(),
  workbooks: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    clinicWorkbookMapId: faker.word.sample(),
    coverImageFile: faker.helpers.arrayElement([
      {
        fileName: faker.word.sample(),
        fileSize: faker.number.int({ min: undefined, max: undefined }),
        fileUrl: faker.word.sample(),
        id: faker.word.sample(),
        ...overrideResponse,
      },
      undefined,
    ]),
    description: faker.word.sample(),
    id: faker.word.sample(),
    isFree: faker.datatype.boolean(),
    isRequired: faker.datatype.boolean(),
    majorSubject: {
      code: faker.word.sample(),
      name: faker.word.sample(),
      ...overrideResponse,
    },
    salePrice: faker.number.int({ min: undefined, max: undefined }),
    tags: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    title: faker.word.sample(),
    workbookStatus: faker.helpers.arrayElement([
      "BEFORE_SALE",
      "ON_SALE",
      "SALE_COMPLETION",
    ] as const),
    workbookType: faker.helpers.arrayElement(["MAJOR", "MINOR"] as const),
    workbookVolumeCount: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  })),
  ...overrideResponse,
});

export const getSearchClinicsMock = (
  overrideResponse: any = {}
): StudentClinicItemResponse[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    areas: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    clinicId: faker.word.sample(),
    clinicProgressStep: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        "ONGOING_DRILL",
        "BEFORE_DRILL_ASSIGNED",
        "BEFORE_DRILL_LEARNED",
        "BEFORE_REPORT",
        "REPORT_RECEPTION",
        "CLINIC_COMPLETION",
        "CLINIC_EXPIRATION",
      ] as const),
      undefined,
    ]),
    field: faker.word.sample(),
    majorSubject: {
      code: faker.word.sample(),
      name: faker.word.sample(),
      ...overrideResponse,
    },
    minorSubjects: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      code: faker.word.sample(),
      name: faker.word.sample(),
      ...overrideResponse,
    })),
    schoolGrades: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    schoolYears: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    status: faker.word.sample(),
    teacherName: faker.word.sample(),
    thumbnailImageUrl: faker.word.sample(),
    title: faker.word.sample(),
    ...overrideResponse,
  }));

export const getGetSearchedClinicMajorSubjectCountMock = (
  overrideResponse: any = {}
): MajorSubjectWithClinicCountResponse => ({
  majorSubjects: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    count: faker.number.int({ min: undefined, max: undefined }),
    majorSubject: {
      code: faker.word.sample(),
      name: faker.word.sample(),
      ...overrideResponse,
    },
    ...overrideResponse,
  })),
  totalCount: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getGetBannersMock = (
  overrideResponse: any = {}
): PublicBannersResponse => ({
  eventModals: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    id: faker.word.sample(),
    modalMobileImage: {
      fileName: faker.word.sample(),
      fileSize: faker.number.int({ min: undefined, max: undefined }),
      fileUrl: faker.word.sample(),
      id: faker.word.sample(),
      ...overrideResponse,
    },
    modalPcImage: {
      fileName: faker.word.sample(),
      fileSize: faker.number.int({ min: undefined, max: undefined }),
      fileUrl: faker.word.sample(),
      id: faker.word.sample(),
      ...overrideResponse,
    },
    ...overrideResponse,
  })),
  stripBanner: faker.helpers.arrayElement([
    {
      link: faker.helpers.arrayElement([
        {
          linkLaunchType: faker.helpers.arrayElement([
            "CURRENT_TAB",
            "NEW_TAB",
          ] as const),
          linkUrl: faker.word.sample(),
          ...overrideResponse,
        },
        undefined,
      ]),
      mobileImage: {
        fileName: faker.word.sample(),
        fileSize: faker.number.int({ min: undefined, max: undefined }),
        fileUrl: faker.word.sample(),
        id: faker.word.sample(),
        ...overrideResponse,
      },
      pcImage: {
        fileName: faker.word.sample(),
        fileSize: faker.number.int({ min: undefined, max: undefined }),
        fileUrl: faker.word.sample(),
        id: faker.word.sample(),
        ...overrideResponse,
      },
      tabletImage: {
        fileName: faker.word.sample(),
        fileSize: faker.number.int({ min: undefined, max: undefined }),
        fileUrl: faker.word.sample(),
        id: faker.word.sample(),
        ...overrideResponse,
      },
      ...overrideResponse,
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetTeacherIntroductionsBySubjectMockHandler = (
  overrideResponse?: TeacherIntroductionBySubjectItemResponse[]
) => {
  return http.get("*/clus/v2/public/teachers", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetTeacherIntroductionsBySubjectMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getGetSeoMockHandler = (overrideResponse?: SeoDataResponse) => {
  return http.get("*/clus/public/seo/detail", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(overrideResponse ? overrideResponse : getGetSeoMock()),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getGetModalsMockHandler = (
  overrideResponse?: PagePublicModalItemResponse
) => {
  return http.get("*/clus/public/modals", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(overrideResponse ? overrideResponse : getGetModalsMock()),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getGetEventsMockHandler = (
  overrideResponse?: PagePublicEventItemResponse
) => {
  return http.get("*/clus/public/events", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(overrideResponse ? overrideResponse : getGetEventsMock()),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getGetEventDetailReu8KmsMockHandler = (
  overrideResponse?: PublicEventDetailResponse
) => {
  return http.get("*/clus/public/events/:eventId", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetEventDetailReu8KmsMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getGetEventCommentsFhU46a4MockHandler = (
  overrideResponse?: PagePublicEventCommentResponse
) => {
  return http.get("*/clus/public/events/:eventId/comments", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetEventCommentsFhU46a4Mock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getGetCurationRecommendationClinicMockHandler = (
  overrideResponse?: StudentCurationRecommendationClinicResponse[]
) => {
  return http.get("*/clus/public/curation/recommendation-clinics", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetCurationRecommendationClinicMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getGetPopularTeachersMockHandler = (
  overrideResponse?: StudentCurationPopularTeacherResponse[]
) => {
  return http.get("*/clus/public/curation/popular-teachers", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetPopularTeachersMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getGetPopularClinicsMockHandler = (
  overrideResponse?: StudentSimpleClinicResponse[]
) => {
  return http.get("*/clus/public/curation/popular-clinics", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetPopularClinicsMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getGetCurationBannersMockHandler = (
  overrideResponse?: PagePublicCurationBannerItemResponse
) => {
  return http.get("*/clus/public/curation-banners", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetCurationBannersMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getGetClinicLOdYCdoMockHandler = (
  overrideResponse?: PublicClinicsDetailResponse
) => {
  return http.get("*/clus/public/clinics/:clinicId", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetClinicLOdYCdoMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getSearchClinicsMockHandler = (
  overrideResponse?: StudentClinicItemResponse[]
) => {
  return http.get("*/clus/public/clinics/search", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSearchClinicsMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getGetSearchedClinicMajorSubjectCountMockHandler = (
  overrideResponse?: MajorSubjectWithClinicCountResponse
) => {
  return http.get(
    "*/clus/public/clinics/search/major-subjects/count",
    async () => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse
            ? overrideResponse
            : getGetSearchedClinicMajorSubjectCountMock()
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        }
      );
    }
  );
};

export const getGetBannersMockHandler = (
  overrideResponse?: PublicBannersResponse
) => {
  return http.get("*/clus/public/banners", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(overrideResponse ? overrideResponse : getGetBannersMock()),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};
export const getPublicMock = () => [
  getGetTeacherIntroductionsBySubjectMockHandler(),
  getGetSeoMockHandler(),
  getGetModalsMockHandler(),
  getGetEventsMockHandler(),
  getGetEventDetailReu8KmsMockHandler(),
  getGetEventCommentsFhU46a4MockHandler(),
  getGetCurationRecommendationClinicMockHandler(),
  getGetPopularTeachersMockHandler(),
  getGetPopularClinicsMockHandler(),
  getGetCurationBannersMockHandler(),
  getGetClinicLOdYCdoMockHandler(),
  getSearchClinicsMockHandler(),
  getGetSearchedClinicMajorSubjectCountMockHandler(),
  getGetBannersMockHandler(),
];
