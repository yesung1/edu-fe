/**
 * Generated by orval v6.24.0 🍺
 * Do not edit manually.
 * CLUS API
 * CLUS Backend API Spec
 * OpenAPI spec version: v1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  ClipDrillResponse,
  DrillTrackingRequest,
  PathApiError,
  StudentDrillItemListResponse,
  StudentSimpleDrillResponse,
  Unit,
} from "../../../model";
import { axiosInstance } from "../../../config/axios-instance";
import type { ErrorType } from "../../../config/axios-instance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * 학생의 드릴 학습 히스토리와 학습 시간을 저장한다.
 * @summary 학생의 드릴 학습 이력 정보 저장하기
 */
export const saveDrillTrackingELDE638 = (
  clinicId: string,
  drillId: string,
  drillTrackingRequest: DrillTrackingRequest,
  options?: SecondParameter<typeof axiosInstance>
) => {
  return axiosInstance<Unit>(
    {
      url: `/clus/clinics/${clinicId}/drills/${drillId}/tracking`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: drillTrackingRequest,
    },
    options
  );
};

export const getSaveDrillTrackingELDE638MutationOptions = <
  TError = ErrorType<PathApiError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof saveDrillTrackingELDE638>>,
    TError,
    { clinicId: string; drillId: string; data: DrillTrackingRequest },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof saveDrillTrackingELDE638>>,
  TError,
  { clinicId: string; drillId: string; data: DrillTrackingRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof saveDrillTrackingELDE638>>,
    { clinicId: string; drillId: string; data: DrillTrackingRequest }
  > = (props) => {
    const { clinicId, drillId, data } = props ?? {};

    return saveDrillTrackingELDE638(clinicId, drillId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SaveDrillTrackingELDE638MutationResult = NonNullable<
  Awaited<ReturnType<typeof saveDrillTrackingELDE638>>
>;
export type SaveDrillTrackingELDE638MutationBody = DrillTrackingRequest;
export type SaveDrillTrackingELDE638MutationError = ErrorType<PathApiError>;

/**
 * @summary 학생의 드릴 학습 이력 정보 저장하기
 */
export const useSaveDrillTrackingELDE638 = <
  TError = ErrorType<PathApiError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof saveDrillTrackingELDE638>>,
    TError,
    { clinicId: string; drillId: string; data: DrillTrackingRequest },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const mutationOptions = getSaveDrillTrackingELDE638MutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary 드릴 - 클립 조회하기 V2
 */
export const getClipDrillBwMmSg = (
  clinicId: string,
  drillId: string,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<ClipDrillResponse>(
    {
      url: `/clus/v2/clinics/${clinicId}/clip-drills/${drillId}`,
      method: "GET",
      signal,
    },
    options
  );
};

export const getGetClipDrillBwMmSgQueryKey = (
  clinicId: string,
  drillId: string
) => {
  return [`/clus/v2/clinics/${clinicId}/clip-drills/${drillId}`] as const;
};

export const getGetClipDrillBwMmSgQueryOptions = <
  TData = Awaited<ReturnType<typeof getClipDrillBwMmSg>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  drillId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getClipDrillBwMmSg>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetClipDrillBwMmSgQueryKey(clinicId, drillId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getClipDrillBwMmSg>>
  > = ({ signal }) =>
    getClipDrillBwMmSg(clinicId, drillId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(clinicId && drillId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getClipDrillBwMmSg>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetClipDrillBwMmSgQueryResult = NonNullable<
  Awaited<ReturnType<typeof getClipDrillBwMmSg>>
>;
export type GetClipDrillBwMmSgQueryError = ErrorType<PathApiError>;

/**
 * @summary 드릴 - 클립 조회하기 V2
 */
export const useGetClipDrillBwMmSg = <
  TData = Awaited<ReturnType<typeof getClipDrillBwMmSg>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  drillId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getClipDrillBwMmSg>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetClipDrillBwMmSgQueryOptions(
    clinicId,
    drillId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * 예정 드릴을 포함한 배정된 전체 드릴을 조회한다
 * @summary 전체 드릴 조회하기
 */
export const getAllDrillsB8FT85M = (
  clinicId: string,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<StudentSimpleDrillResponse[]>(
    { url: `/clus/clinics/${clinicId}/entire-drills`, method: "GET", signal },
    options
  );
};

export const getGetAllDrillsB8FT85MQueryKey = (clinicId: string) => {
  return [`/clus/clinics/${clinicId}/entire-drills`] as const;
};

export const getGetAllDrillsB8FT85MQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllDrillsB8FT85M>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAllDrillsB8FT85M>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAllDrillsB8FT85MQueryKey(clinicId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAllDrillsB8FT85M>>
  > = ({ signal }) => getAllDrillsB8FT85M(clinicId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!clinicId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllDrillsB8FT85M>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllDrillsB8FT85MQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllDrillsB8FT85M>>
>;
export type GetAllDrillsB8FT85MQueryError = ErrorType<PathApiError>;

/**
 * @summary 전체 드릴 조회하기
 */
export const useGetAllDrillsB8FT85M = <
  TData = Awaited<ReturnType<typeof getAllDrillsB8FT85M>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAllDrillsB8FT85M>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAllDrillsB8FT85MQueryOptions(clinicId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary 드릴 조회하기
 */
export const getDrillsB8FT85M = (
  clinicId: string,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<StudentDrillItemListResponse>(
    { url: `/clus/clinics/${clinicId}/drills`, method: "GET", signal },
    options
  );
};

export const getGetDrillsB8FT85MQueryKey = (clinicId: string) => {
  return [`/clus/clinics/${clinicId}/drills`] as const;
};

export const getGetDrillsB8FT85MQueryOptions = <
  TData = Awaited<ReturnType<typeof getDrillsB8FT85M>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDrillsB8FT85M>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetDrillsB8FT85MQueryKey(clinicId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDrillsB8FT85M>>
  > = ({ signal }) => getDrillsB8FT85M(clinicId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!clinicId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDrillsB8FT85M>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetDrillsB8FT85MQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDrillsB8FT85M>>
>;
export type GetDrillsB8FT85MQueryError = ErrorType<PathApiError>;

/**
 * @summary 드릴 조회하기
 */
export const useGetDrillsB8FT85M = <
  TData = Awaited<ReturnType<typeof getDrillsB8FT85M>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDrillsB8FT85M>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDrillsB8FT85MQueryOptions(clinicId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
