/**
 * Generated by orval v6.24.0 🍺
 * Do not edit manually.
 * CLUS API
 * CLUS Backend API Spec
 * OpenAPI spec version: v1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type {
  ClipDrillResponse,
  StudentDrillItemListResponse,
  StudentSimpleDrillResponse,
  Unit,
} from "../../../model";

export const getSaveDrillTrackingELDE638Mock = (): Unit => ({});

export const getGetClipDrillBwMmSgMock = (
  overrideResponse: any = {}
): ClipDrillResponse => ({
  content: {
    categories: faker.helpers.arrayElement([
      "CONCEPTUAL_LECTURE",
      "PROBLEM_SOLVING",
      "LEARNING_SUMMARY",
    ] as const),
    completionConditionType: faker.helpers.arrayElement([
      "PARTIAL_VIEWING",
      "FULL_VIEWING",
    ] as const),
    dashUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    description: faker.word.sample(),
    hlsUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    id: faker.word.sample(),
    name: faker.word.sample(),
    playUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    tags: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    transcodingStatus: faker.helpers.arrayElement([
      "IN_PROGRESS",
      "COMPLETED",
      "FAILED",
    ] as const),
    uploadFileInfo: faker.helpers.arrayElement([
      {
        fileName: faker.word.sample(),
        fileSize: faker.number.int({ min: undefined, max: undefined }),
        fileUrl: faker.word.sample(),
        id: faker.word.sample(),
        ...overrideResponse,
      },
      undefined,
    ]),
    uploadType: faker.helpers.arrayElement([
      "INTERNAL",
      "INTERNAL_DRM",
      "YOUTUBE",
      "VIMEO",
    ] as const),
    videoId: faker.word.sample(),
    viewingPoint: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  contentType: faker.word.sample(),
  drillRound: faker.number.int({ min: undefined, max: undefined }),
  id: faker.word.sample(),
  isCompleted: faker.datatype.boolean(),
  nextContentType: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  nextId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getGetAllDrillsB8FT85MMock = (
  overrideResponse: any = {}
): StudentSimpleDrillResponse[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    drillContents: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      contentType: faker.helpers.arrayElement([
        "EXAM",
        "CLIP",
        "TEXTBOOK",
      ] as const),
      drillContentId: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      isCompleted: faker.datatype.boolean(),
      title: faker.word.sample(),
      ...overrideResponse,
    })),
    drillRound: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  }));

export const getGetDrillsB8FT85MMock = (
  overrideResponse: any = {}
): StudentDrillItemListResponse => ({
  clinicStartedDate: faker.word.sample(),
  clinicTitle: faker.word.sample(),
  currentDrillContentId: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  currentDrillRound: faker.number.int({ min: undefined, max: undefined }),
  drillOpenType: faker.helpers.arrayElement(["ENTIRE", "SEQUENTIAL"] as const),
  drillSummary: {
    clipDrillContentTotalCount: faker.number.int({
      min: undefined,
      max: undefined,
    }),
    drillContentTotalCount: faker.number.int({
      min: undefined,
      max: undefined,
    }),
    drillTotalCount: faker.number.int({ min: undefined, max: undefined }),
    examDrillContentTotalCount: faker.number.int({
      min: undefined,
      max: undefined,
    }),
    textbookDrillContentTotalCount: faker.number.int({
      min: undefined,
      max: undefined,
    }),
    ...overrideResponse,
  },
  items: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    assignedCount: faker.number.int({ min: undefined, max: undefined }),
    completedCount: faker.number.int({ min: undefined, max: undefined }),
    details: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      clipContentAttribute: faker.helpers.arrayElement([
        {
          clipRunningTime: faker.word.sample(),
          clipType: faker.word.sample(),
          ...overrideResponse,
        },
        undefined,
      ]),
      contentAttribute: faker.word.sample(),
      contentType: faker.helpers.arrayElement([
        "EXAM",
        "CLIP",
        "TEXTBOOK",
      ] as const),
      id: faker.word.sample(),
      isCompleted: faker.datatype.boolean(),
      title: faker.word.sample(),
      ...overrideResponse,
    })),
    goalMessage: faker.word.sample(),
    round: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  })),
  nextDrill: {
    isExist: faker.datatype.boolean(),
    nextDrillType: faker.word.sample(),
    openAt: faker.word.sample(),
    ...overrideResponse,
  },
  report: faker.datatype.boolean(),
  ...overrideResponse,
});

export const getSaveDrillTrackingELDE638MockHandler = (
  overrideResponse?: Unit
) => {
  return http.post(
    "*/clus/clinics/:clinicId/drills/:drillId/tracking",
    async () => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse
            ? overrideResponse
            : getSaveDrillTrackingELDE638Mock()
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        }
      );
    }
  );
};

export const getGetClipDrillBwMmSgMockHandler = (
  overrideResponse?: ClipDrillResponse
) => {
  return http.get(
    "*/clus/v2/clinics/:clinicId/clip-drills/:drillId",
    async () => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse ? overrideResponse : getGetClipDrillBwMmSgMock()
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        }
      );
    }
  );
};

export const getGetAllDrillsB8FT85MMockHandler = (
  overrideResponse?: StudentSimpleDrillResponse[]
) => {
  return http.get("*/clus/clinics/:clinicId/entire-drills", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetAllDrillsB8FT85MMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getGetDrillsB8FT85MMockHandler = (
  overrideResponse?: StudentDrillItemListResponse
) => {
  return http.get("*/clus/clinics/:clinicId/drills", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetDrillsB8FT85MMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};
export const getDrillMock = () => [
  getSaveDrillTrackingELDE638MockHandler(),
  getGetClipDrillBwMmSgMockHandler(),
  getGetAllDrillsB8FT85MMockHandler(),
  getGetDrillsB8FT85MMockHandler(),
];
