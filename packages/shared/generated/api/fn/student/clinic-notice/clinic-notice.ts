/**
 * Generated by orval v6.24.0 🍺
 * Do not edit manually.
 * CLUS API
 * CLUS Backend API Spec
 * OpenAPI spec version: v1.0.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  GetRecentClinicNoticeParams,
  PageStudentClinicNoticeResponse,
  PathApiError,
  StudentNoticeDetailResponse,
} from "../../../model";
import { axiosInstance } from "../../../config/axios-instance";
import type { ErrorType } from "../../../config/axios-instance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary 클래스 최신 공지 상세 조회하기
 */
export const getRecentClinicNoticeDetailB8FT85M = (
  clinicId: string,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<StudentNoticeDetailResponse>(
    {
      url: `/clus/clinics/${clinicId}/clinic-notices/recent`,
      method: "GET",
      signal,
    },
    options
  );
};

export const getGetRecentClinicNoticeDetailB8FT85MQueryKey = (
  clinicId: string
) => {
  return [`/clus/clinics/${clinicId}/clinic-notices/recent`] as const;
};

export const getGetRecentClinicNoticeDetailB8FT85MQueryOptions = <
  TData = Awaited<ReturnType<typeof getRecentClinicNoticeDetailB8FT85M>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRecentClinicNoticeDetailB8FT85M>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetRecentClinicNoticeDetailB8FT85MQueryKey(clinicId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRecentClinicNoticeDetailB8FT85M>>
  > = ({ signal }) =>
    getRecentClinicNoticeDetailB8FT85M(clinicId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!clinicId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRecentClinicNoticeDetailB8FT85M>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetRecentClinicNoticeDetailB8FT85MQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRecentClinicNoticeDetailB8FT85M>>
>;
export type GetRecentClinicNoticeDetailB8FT85MQueryError =
  ErrorType<PathApiError>;

/**
 * @summary 클래스 최신 공지 상세 조회하기
 */
export const useGetRecentClinicNoticeDetailB8FT85M = <
  TData = Awaited<ReturnType<typeof getRecentClinicNoticeDetailB8FT85M>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRecentClinicNoticeDetailB8FT85M>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRecentClinicNoticeDetailB8FT85MQueryOptions(
    clinicId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary 수강중 클래스의 최신 공지 목록 조회하기
 */
export const getRecentClinicNotice = (
  params?: GetRecentClinicNoticeParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<PageStudentClinicNoticeResponse>(
    { url: `/clus/clinic-notices/recent`, method: "GET", params, signal },
    options
  );
};

export const getGetRecentClinicNoticeQueryKey = (
  params?: GetRecentClinicNoticeParams
) => {
  return [`/clus/clinic-notices/recent`, ...(params ? [params] : [])] as const;
};

export const getGetRecentClinicNoticeQueryOptions = <
  TData = Awaited<ReturnType<typeof getRecentClinicNotice>>,
  TError = ErrorType<PathApiError>
>(
  params?: GetRecentClinicNoticeParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRecentClinicNotice>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetRecentClinicNoticeQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRecentClinicNotice>>
  > = ({ signal }) => getRecentClinicNotice(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRecentClinicNotice>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetRecentClinicNoticeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRecentClinicNotice>>
>;
export type GetRecentClinicNoticeQueryError = ErrorType<PathApiError>;

/**
 * @summary 수강중 클래스의 최신 공지 목록 조회하기
 */
export const useGetRecentClinicNotice = <
  TData = Awaited<ReturnType<typeof getRecentClinicNotice>>,
  TError = ErrorType<PathApiError>
>(
  params?: GetRecentClinicNoticeParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRecentClinicNotice>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRecentClinicNoticeQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
