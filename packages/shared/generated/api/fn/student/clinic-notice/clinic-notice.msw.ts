/**
 * Generated by orval v6.24.0 🍺
 * Do not edit manually.
 * CLUS API
 * CLUS Backend API Spec
 * OpenAPI spec version: v1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type {
  PageStudentClinicNoticeResponse,
  StudentNoticeDetailResponse,
} from "../../../model";

export const getGetRecentClinicNoticeDetailB8FT85MMock = (
  overrideResponse: any = {}
): StudentNoticeDetailResponse => ({
  attachmentFiles: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    fileName: faker.word.sample(),
    fileSize: faker.number.int({ min: undefined, max: undefined }),
    fileUrl: faker.word.sample(),
    id: faker.word.sample(),
    ...overrideResponse,
  })),
  attachmentImages: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    fileName: faker.word.sample(),
    fileSize: faker.number.int({ min: undefined, max: undefined }),
    fileUrl: faker.word.sample(),
    id: faker.word.sample(),
    ...overrideResponse,
  })),
  authorUser: {
    email: faker.word.sample(),
    name: faker.word.sample(),
    userId: faker.word.sample(),
    userType: faker.helpers.arrayElement([
      "TEACHER",
      "STUDENT",
      "ADMIN",
    ] as const),
    ...overrideResponse,
  },
  content: faker.word.sample(),
  createdAt: faker.word.sample(),
  id: faker.word.sample(),
  publishedAt: faker.word.sample(),
  title: faker.word.sample(),
  ...overrideResponse,
});

export const getGetRecentClinicNoticeMock = (
  overrideResponse: any = {}
): PageStudentClinicNoticeResponse => ({
  content: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      clinicId: faker.word.sample(),
      createdAt: faker.word.sample(),
      noticeId: faker.word.sample(),
      publishedAt: faker.word.sample(),
      title: faker.word.sample(),
      ...overrideResponse,
    })),
    undefined,
  ]),
  empty: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  first: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  last: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  number: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  numberOfElements: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  pageable: faker.helpers.arrayElement([
    {
      offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      paged: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      pageNumber: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      pageSize: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      sort: faker.helpers.arrayElement([
        {
          empty: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          sorted: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          unsorted: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      unpaged: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  size: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  sort: faker.helpers.arrayElement([
    {
      empty: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      sorted: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      unsorted: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  totalElements: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalPages: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetRecentClinicNoticeDetailB8FT85MMockHandler = (
  overrideResponse?: StudentNoticeDetailResponse
) => {
  return http.get(
    "*/clus/clinics/:clinicId/clinic-notices/recent",
    async () => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse
            ? overrideResponse
            : getGetRecentClinicNoticeDetailB8FT85MMock()
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        }
      );
    }
  );
};

export const getGetRecentClinicNoticeMockHandler = (
  overrideResponse?: PageStudentClinicNoticeResponse
) => {
  return http.get("*/clus/clinic-notices/recent", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetRecentClinicNoticeMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};
export const getClinicNoticeMock = () => [
  getGetRecentClinicNoticeDetailB8FT85MMockHandler(),
  getGetRecentClinicNoticeMockHandler(),
];
