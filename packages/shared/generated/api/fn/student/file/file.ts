/**
 * Generated by orval v6.24.0 üç∫
 * Do not edit manually.
 * CLUS API
 * CLUS Backend API Spec
 * OpenAPI spec version: v1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  GetDrillContentFileUrlELDE638Params,
  PathApiError,
  UploadFileResponse,
  UploadStudentFileBody,
} from "../../../model";
import { axiosInstance } from "../../../config/axios-instance";
import type { ErrorType } from "../../../config/axios-instance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary ÌååÏùº ÏóÖÎ°úÎìúÌïòÍ∏∞
 */
export const uploadStudentFile = (
  uploadStudentFileBody: UploadStudentFileBody,
  options?: SecondParameter<typeof axiosInstance>
) => {
  const formData = new FormData();
  if (uploadStudentFileBody.file !== undefined) {
    formData.append("file", uploadStudentFileBody.file);
  }
  if (uploadStudentFileBody.uploadType !== undefined) {
    formData.append("uploadType", uploadStudentFileBody.uploadType);
  }

  return axiosInstance<UploadFileResponse>(
    {
      url: `/clus/files`,
      method: "POST",
      headers: { "Content-Type": "multipart/form-data" },
      data: formData,
    },
    options
  );
};

export const getUploadStudentFileMutationOptions = <
  TError = ErrorType<PathApiError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof uploadStudentFile>>,
    TError,
    { data: UploadStudentFileBody },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof uploadStudentFile>>,
  TError,
  { data: UploadStudentFileBody },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof uploadStudentFile>>,
    { data: UploadStudentFileBody }
  > = (props) => {
    const { data } = props ?? {};

    return uploadStudentFile(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UploadStudentFileMutationResult = NonNullable<
  Awaited<ReturnType<typeof uploadStudentFile>>
>;
export type UploadStudentFileMutationBody = UploadStudentFileBody;
export type UploadStudentFileMutationError = ErrorType<PathApiError>;

/**
 * @summary ÌååÏùº ÏóÖÎ°úÎìúÌïòÍ∏∞
 */
export const useUploadStudentFile = <
  TError = ErrorType<PathApiError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof uploadStudentFile>>,
    TError,
    { data: UploadStudentFileBody },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const mutationOptions = getUploadStudentFileMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary ÎìúÎ¶¥ Ïª®ÌÖêÏ∏† ÌååÏùº(Î¨∏ÌíÄ, ÍµêÏïà) URL Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
 */
export const getDrillContentFileUrlELDE638 = (
  clinicId: string,
  drillContentId: string,
  params: GetDrillContentFileUrlELDE638Params,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<string>(
    {
      url: `/clus/files/clinics/${clinicId}/students/drill-contents/${drillContentId}`,
      method: "GET",
      params,
      signal,
    },
    options
  );
};

export const getGetDrillContentFileUrlELDE638QueryKey = (
  clinicId: string,
  drillContentId: string,
  params: GetDrillContentFileUrlELDE638Params
) => {
  return [
    `/clus/files/clinics/${clinicId}/students/drill-contents/${drillContentId}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetDrillContentFileUrlELDE638QueryOptions = <
  TData = Awaited<ReturnType<typeof getDrillContentFileUrlELDE638>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  drillContentId: string,
  params: GetDrillContentFileUrlELDE638Params,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDrillContentFileUrlELDE638>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetDrillContentFileUrlELDE638QueryKey(clinicId, drillContentId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDrillContentFileUrlELDE638>>
  > = ({ signal }) =>
    getDrillContentFileUrlELDE638(
      clinicId,
      drillContentId,
      params,
      requestOptions,
      signal
    );

  return {
    queryKey,
    queryFn,
    enabled: !!(clinicId && drillContentId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDrillContentFileUrlELDE638>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetDrillContentFileUrlELDE638QueryResult = NonNullable<
  Awaited<ReturnType<typeof getDrillContentFileUrlELDE638>>
>;
export type GetDrillContentFileUrlELDE638QueryError = ErrorType<PathApiError>;

/**
 * @summary ÎìúÎ¶¥ Ïª®ÌÖêÏ∏† ÌååÏùº(Î¨∏ÌíÄ, ÍµêÏïà) URL Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
 */
export const useGetDrillContentFileUrlELDE638 = <
  TData = Awaited<ReturnType<typeof getDrillContentFileUrlELDE638>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  drillContentId: string,
  params: GetDrillContentFileUrlELDE638Params,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDrillContentFileUrlELDE638>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDrillContentFileUrlELDE638QueryOptions(
    clinicId,
    drillContentId,
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
