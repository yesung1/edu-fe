/**
 * Generated by orval v6.24.0 üç∫
 * Do not edit manually.
 * CLUS API
 * CLUS Backend API Spec
 * OpenAPI spec version: v1.0.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  UseMutationOptions,
} from "@tanstack/react-query";
import type {
  EventCommentRequest,
  IdResponse,
  PathApiError,
  Unit,
} from "../../../model";
import { axiosInstance } from "../../../config/axios-instance";
import type { ErrorType } from "../../../config/axios-instance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary Ïù¥Î≤§Ìä∏ ÎåìÍ∏Ä ÏàòÏ†ïÌïòÍ∏∞
 */
export const updateCommentWZTOk = (
  eventId: string,
  eventCommentId: string,
  eventCommentRequest: EventCommentRequest,
  options?: SecondParameter<typeof axiosInstance>
) => {
  return axiosInstance<Unit>(
    {
      url: `/clus/events/${eventId}/comments/${eventCommentId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: eventCommentRequest,
    },
    options
  );
};

export const getUpdateCommentWZTOkMutationOptions = <
  TError = ErrorType<PathApiError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCommentWZTOk>>,
    TError,
    { eventId: string; eventCommentId: string; data: EventCommentRequest },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateCommentWZTOk>>,
  TError,
  { eventId: string; eventCommentId: string; data: EventCommentRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateCommentWZTOk>>,
    { eventId: string; eventCommentId: string; data: EventCommentRequest }
  > = (props) => {
    const { eventId, eventCommentId, data } = props ?? {};

    return updateCommentWZTOk(eventId, eventCommentId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCommentWZTOkMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateCommentWZTOk>>
>;
export type UpdateCommentWZTOkMutationBody = EventCommentRequest;
export type UpdateCommentWZTOkMutationError = ErrorType<PathApiError>;

/**
 * @summary Ïù¥Î≤§Ìä∏ ÎåìÍ∏Ä ÏàòÏ†ïÌïòÍ∏∞
 */
export const useUpdateCommentWZTOk = <
  TError = ErrorType<PathApiError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCommentWZTOk>>,
    TError,
    { eventId: string; eventCommentId: string; data: EventCommentRequest },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const mutationOptions = getUpdateCommentWZTOkMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Ïù¥Î≤§Ìä∏ ÎåìÍ∏Ä ÏÇ≠Ï†úÌïòÍ∏∞
 */
export const deleteCommentPXSvBc4 = (
  eventId: string,
  eventCommentId: string,
  options?: SecondParameter<typeof axiosInstance>
) => {
  return axiosInstance<Unit>(
    {
      url: `/clus/events/${eventId}/comments/${eventCommentId}`,
      method: "DELETE",
    },
    options
  );
};

export const getDeleteCommentPXSvBc4MutationOptions = <
  TError = ErrorType<PathApiError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCommentPXSvBc4>>,
    TError,
    { eventId: string; eventCommentId: string },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCommentPXSvBc4>>,
  TError,
  { eventId: string; eventCommentId: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCommentPXSvBc4>>,
    { eventId: string; eventCommentId: string }
  > = (props) => {
    const { eventId, eventCommentId } = props ?? {};

    return deleteCommentPXSvBc4(eventId, eventCommentId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCommentPXSvBc4MutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCommentPXSvBc4>>
>;

export type DeleteCommentPXSvBc4MutationError = ErrorType<PathApiError>;

/**
 * @summary Ïù¥Î≤§Ìä∏ ÎåìÍ∏Ä ÏÇ≠Ï†úÌïòÍ∏∞
 */
export const useDeleteCommentPXSvBc4 = <
  TError = ErrorType<PathApiError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCommentPXSvBc4>>,
    TError,
    { eventId: string; eventCommentId: string },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const mutationOptions = getDeleteCommentPXSvBc4MutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Ïù¥Î≤§Ìä∏ ÎåìÍ∏Ä Îì±Î°ùÌïòÍ∏∞
 */
export const createCommentLx8gRcU = (
  eventId: string,
  eventCommentRequest: EventCommentRequest,
  options?: SecondParameter<typeof axiosInstance>
) => {
  return axiosInstance<IdResponse>(
    {
      url: `/clus/events/${eventId}/comments`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: eventCommentRequest,
    },
    options
  );
};

export const getCreateCommentLx8gRcUMutationOptions = <
  TError = ErrorType<PathApiError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createCommentLx8gRcU>>,
    TError,
    { eventId: string; data: EventCommentRequest },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createCommentLx8gRcU>>,
  TError,
  { eventId: string; data: EventCommentRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createCommentLx8gRcU>>,
    { eventId: string; data: EventCommentRequest }
  > = (props) => {
    const { eventId, data } = props ?? {};

    return createCommentLx8gRcU(eventId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateCommentLx8gRcUMutationResult = NonNullable<
  Awaited<ReturnType<typeof createCommentLx8gRcU>>
>;
export type CreateCommentLx8gRcUMutationBody = EventCommentRequest;
export type CreateCommentLx8gRcUMutationError = ErrorType<PathApiError>;

/**
 * @summary Ïù¥Î≤§Ìä∏ ÎåìÍ∏Ä Îì±Î°ùÌïòÍ∏∞
 */
export const useCreateCommentLx8gRcU = <
  TError = ErrorType<PathApiError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createCommentLx8gRcU>>,
    TError,
    { eventId: string; data: EventCommentRequest },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const mutationOptions = getCreateCommentLx8gRcUMutationOptions(options);

  return useMutation(mutationOptions);
};
