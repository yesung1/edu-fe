/**
 * Generated by orval v6.24.0 🍺
 * Do not edit manually.
 * CLUS API
 * CLUS Backend API Spec
 * OpenAPI spec version: v1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type { IdResponse, Unit } from "../../../model";

export const getUpdateCommentWZTOkMock = (): Unit => ({});

export const getDeleteCommentPXSvBc4Mock = (): Unit => ({});

export const getCreateCommentLx8gRcUMock = (
  overrideResponse: any = {}
): IdResponse => ({ id: faker.word.sample(), ...overrideResponse });

export const getUpdateCommentWZTOkMockHandler = (overrideResponse?: Unit) => {
  return http.put(
    "*/clus/events/:eventId/comments/:eventCommentId",
    async () => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse ? overrideResponse : getUpdateCommentWZTOkMock()
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        }
      );
    }
  );
};

export const getDeleteCommentPXSvBc4MockHandler = (overrideResponse?: Unit) => {
  return http.delete(
    "*/clus/events/:eventId/comments/:eventCommentId",
    async () => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse ? overrideResponse : getDeleteCommentPXSvBc4Mock()
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        }
      );
    }
  );
};

export const getCreateCommentLx8gRcUMockHandler = (
  overrideResponse?: IdResponse
) => {
  return http.post("*/clus/events/:eventId/comments", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getCreateCommentLx8gRcUMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};
export const getEventMock = () => [
  getUpdateCommentWZTOkMockHandler(),
  getDeleteCommentPXSvBc4MockHandler(),
  getCreateCommentLx8gRcUMockHandler(),
];
