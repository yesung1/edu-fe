/**
 * Generated by orval v6.24.0 üç∫
 * Do not edit manually.
 * CLUS API
 * CLUS Backend API Spec
 * OpenAPI spec version: v1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  CashReceiptIssueRequest,
  ElectronicReceiptResponse,
  IdResponse,
  LatestBuyerResponse,
  PathApiError,
  PossiblePaymentMethodsResponse,
  RefundBanksResponse,
  StudentPaymentDetailResponse,
  StudentPaymentRefundRequest,
  StudentPaymentResponse,
  StudentRefundDetailResponse,
  StudentRefundResponse,
  Unit,
} from "../../../model";
import { axiosInstance } from "../../../config/axios-instance";
import type { ErrorType } from "../../../config/axios-instance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary ÌôòÎ∂à Ïã†Ï≤≠ÌïòÍ∏∞
 */
export const refundPaymentIouxJYM = (
  paymentId: string,
  studentPaymentRefundRequest: StudentPaymentRefundRequest,
  options?: SecondParameter<typeof axiosInstance>
) => {
  return axiosInstance<IdResponse>(
    {
      url: `/clus/payments/${paymentId}/refund`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: studentPaymentRefundRequest,
    },
    options
  );
};

export const getRefundPaymentIouxJYMMutationOptions = <
  TError = ErrorType<PathApiError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof refundPaymentIouxJYM>>,
    TError,
    { paymentId: string; data: StudentPaymentRefundRequest },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof refundPaymentIouxJYM>>,
  TError,
  { paymentId: string; data: StudentPaymentRefundRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof refundPaymentIouxJYM>>,
    { paymentId: string; data: StudentPaymentRefundRequest }
  > = (props) => {
    const { paymentId, data } = props ?? {};

    return refundPaymentIouxJYM(paymentId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RefundPaymentIouxJYMMutationResult = NonNullable<
  Awaited<ReturnType<typeof refundPaymentIouxJYM>>
>;
export type RefundPaymentIouxJYMMutationBody = StudentPaymentRefundRequest;
export type RefundPaymentIouxJYMMutationError = ErrorType<PathApiError>;

/**
 * @summary ÌôòÎ∂à Ïã†Ï≤≠ÌïòÍ∏∞
 */
export const useRefundPaymentIouxJYM = <
  TError = ErrorType<PathApiError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof refundPaymentIouxJYM>>,
    TError,
    { paymentId: string; data: StudentPaymentRefundRequest },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const mutationOptions = getRefundPaymentIouxJYMMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Í∞ÄÏÉÅÍ≥ÑÏ¢å Ï†ïÎ≥¥ ÏïåÎ¶ºÌÜ° Î≥¥ÎÇ¥Í∏∞
 */
export const notifyVirtualAccountInfoUVB8jS8 = (
  paymentId: string,
  options?: SecondParameter<typeof axiosInstance>
) => {
  return axiosInstance<Unit>(
    {
      url: `/clus/payments/${paymentId}/notify/virtual-account-info`,
      method: "POST",
    },
    options
  );
};

export const getNotifyVirtualAccountInfoUVB8jS8MutationOptions = <
  TError = ErrorType<PathApiError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof notifyVirtualAccountInfoUVB8jS8>>,
    TError,
    { paymentId: string },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof notifyVirtualAccountInfoUVB8jS8>>,
  TError,
  { paymentId: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof notifyVirtualAccountInfoUVB8jS8>>,
    { paymentId: string }
  > = (props) => {
    const { paymentId } = props ?? {};

    return notifyVirtualAccountInfoUVB8jS8(paymentId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type NotifyVirtualAccountInfoUVB8jS8MutationResult = NonNullable<
  Awaited<ReturnType<typeof notifyVirtualAccountInfoUVB8jS8>>
>;

export type NotifyVirtualAccountInfoUVB8jS8MutationError =
  ErrorType<PathApiError>;

/**
 * @summary Í∞ÄÏÉÅÍ≥ÑÏ¢å Ï†ïÎ≥¥ ÏïåÎ¶ºÌÜ° Î≥¥ÎÇ¥Í∏∞
 */
export const useNotifyVirtualAccountInfoUVB8jS8 = <
  TError = ErrorType<PathApiError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof notifyVirtualAccountInfoUVB8jS8>>,
    TError,
    { paymentId: string },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const mutationOptions =
    getNotifyVirtualAccountInfoUVB8jS8MutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary ÌòÑÍ∏à ÏòÅÏàòÏ¶ù Î∞úÍ∏âÌïòÍ∏∞
 */
export const issueCashReceiptIouxJYM = (
  paymentId: string,
  cashReceiptIssueRequest: CashReceiptIssueRequest,
  options?: SecondParameter<typeof axiosInstance>
) => {
  return axiosInstance<Unit>(
    {
      url: `/clus/payments/${paymentId}/cash-receipt`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: cashReceiptIssueRequest,
    },
    options
  );
};

export const getIssueCashReceiptIouxJYMMutationOptions = <
  TError = ErrorType<PathApiError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof issueCashReceiptIouxJYM>>,
    TError,
    { paymentId: string; data: CashReceiptIssueRequest },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof issueCashReceiptIouxJYM>>,
  TError,
  { paymentId: string; data: CashReceiptIssueRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof issueCashReceiptIouxJYM>>,
    { paymentId: string; data: CashReceiptIssueRequest }
  > = (props) => {
    const { paymentId, data } = props ?? {};

    return issueCashReceiptIouxJYM(paymentId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type IssueCashReceiptIouxJYMMutationResult = NonNullable<
  Awaited<ReturnType<typeof issueCashReceiptIouxJYM>>
>;
export type IssueCashReceiptIouxJYMMutationBody = CashReceiptIssueRequest;
export type IssueCashReceiptIouxJYMMutationError = ErrorType<PathApiError>;

/**
 * @summary ÌòÑÍ∏à ÏòÅÏàòÏ¶ù Î∞úÍ∏âÌïòÍ∏∞
 */
export const useIssueCashReceiptIouxJYM = <
  TError = ErrorType<PathApiError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof issueCashReceiptIouxJYM>>,
    TError,
    { paymentId: string; data: CashReceiptIssueRequest },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const mutationOptions = getIssueCashReceiptIouxJYMMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary ÌôòÎ∂à ÎÇ¥Ïó≠ Ï°∞ÌöåÌïòÍ∏∞
 */
export const getRefunds = (
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<StudentRefundResponse[]>(
    { url: `/clus/refunds`, method: "GET", signal },
    options
  );
};

export const getGetRefundsQueryKey = () => {
  return [`/clus/refunds`] as const;
};

export const getGetRefundsQueryOptions = <
  TData = Awaited<ReturnType<typeof getRefunds>>,
  TError = ErrorType<PathApiError>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getRefunds>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRefundsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRefunds>>> = ({
    signal,
  }) => getRefunds(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRefunds>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetRefundsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRefunds>>
>;
export type GetRefundsQueryError = ErrorType<PathApiError>;

/**
 * @summary ÌôòÎ∂à ÎÇ¥Ïó≠ Ï°∞ÌöåÌïòÍ∏∞
 */
export const useGetRefunds = <
  TData = Awaited<ReturnType<typeof getRefunds>>,
  TError = ErrorType<PathApiError>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getRefunds>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRefundsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary ÌôòÎ∂à ÎÇ¥Ïó≠ ÏÉÅÏÑ∏ Ï°∞ÌöåÌïòÍ∏∞
 */
export const getRefundJrEFRjk = (
  refundId: string,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<StudentRefundDetailResponse>(
    { url: `/clus/refunds/${refundId}`, method: "GET", signal },
    options
  );
};

export const getGetRefundJrEFRjkQueryKey = (refundId: string) => {
  return [`/clus/refunds/${refundId}`] as const;
};

export const getGetRefundJrEFRjkQueryOptions = <
  TData = Awaited<ReturnType<typeof getRefundJrEFRjk>>,
  TError = ErrorType<PathApiError>
>(
  refundId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRefundJrEFRjk>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetRefundJrEFRjkQueryKey(refundId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRefundJrEFRjk>>
  > = ({ signal }) => getRefundJrEFRjk(refundId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!refundId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRefundJrEFRjk>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetRefundJrEFRjkQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRefundJrEFRjk>>
>;
export type GetRefundJrEFRjkQueryError = ErrorType<PathApiError>;

/**
 * @summary ÌôòÎ∂à ÎÇ¥Ïó≠ ÏÉÅÏÑ∏ Ï°∞ÌöåÌïòÍ∏∞
 */
export const useGetRefundJrEFRjk = <
  TData = Awaited<ReturnType<typeof getRefundJrEFRjk>>,
  TError = ErrorType<PathApiError>
>(
  refundId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRefundJrEFRjk>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRefundJrEFRjkQueryOptions(refundId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary ÌôòÎ∂à ÏöîÏ≤≠ Ï∑®ÏÜåÌïòÍ∏∞
 */
export const cancelRefundRequestJrEFRjk = (
  refundId: string,
  options?: SecondParameter<typeof axiosInstance>
) => {
  return axiosInstance<Unit>(
    { url: `/clus/refunds/${refundId}`, method: "DELETE" },
    options
  );
};

export const getCancelRefundRequestJrEFRjkMutationOptions = <
  TError = ErrorType<PathApiError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cancelRefundRequestJrEFRjk>>,
    TError,
    { refundId: string },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof cancelRefundRequestJrEFRjk>>,
  TError,
  { refundId: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cancelRefundRequestJrEFRjk>>,
    { refundId: string }
  > = (props) => {
    const { refundId } = props ?? {};

    return cancelRefundRequestJrEFRjk(refundId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CancelRefundRequestJrEFRjkMutationResult = NonNullable<
  Awaited<ReturnType<typeof cancelRefundRequestJrEFRjk>>
>;

export type CancelRefundRequestJrEFRjkMutationError = ErrorType<PathApiError>;

/**
 * @summary ÌôòÎ∂à ÏöîÏ≤≠ Ï∑®ÏÜåÌïòÍ∏∞
 */
export const useCancelRefundRequestJrEFRjk = <
  TError = ErrorType<PathApiError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cancelRefundRequestJrEFRjk>>,
    TError,
    { refundId: string },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const mutationOptions = getCancelRefundRequestJrEFRjkMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Í≤∞Ï†ú ÎÇ¥Ïó≠ Ï°∞ÌöåÌïòÍ∏∞
 */
export const getPayments = (
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<StudentPaymentResponse[]>(
    { url: `/clus/payments`, method: "GET", signal },
    options
  );
};

export const getGetPaymentsQueryKey = () => {
  return [`/clus/payments`] as const;
};

export const getGetPaymentsQueryOptions = <
  TData = Awaited<ReturnType<typeof getPayments>>,
  TError = ErrorType<PathApiError>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getPayments>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPaymentsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPayments>>> = ({
    signal,
  }) => getPayments(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPayments>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPaymentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPayments>>
>;
export type GetPaymentsQueryError = ErrorType<PathApiError>;

/**
 * @summary Í≤∞Ï†ú ÎÇ¥Ïó≠ Ï°∞ÌöåÌïòÍ∏∞
 */
export const useGetPayments = <
  TData = Awaited<ReturnType<typeof getPayments>>,
  TError = ErrorType<PathApiError>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getPayments>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPaymentsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Í≤∞Ï†ú ÎÇ¥Ïó≠ ÏÉÅÏÑ∏ Ï°∞ÌöåÌïòÍ∏∞
 */
export const getPaymentUVB8jS8 = (
  paymentId: string,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<StudentPaymentDetailResponse>(
    { url: `/clus/payments/${paymentId}`, method: "GET", signal },
    options
  );
};

export const getGetPaymentUVB8jS8QueryKey = (paymentId: string) => {
  return [`/clus/payments/${paymentId}`] as const;
};

export const getGetPaymentUVB8jS8QueryOptions = <
  TData = Awaited<ReturnType<typeof getPaymentUVB8jS8>>,
  TError = ErrorType<PathApiError>
>(
  paymentId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getPaymentUVB8jS8>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPaymentUVB8jS8QueryKey(paymentId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPaymentUVB8jS8>>
  > = ({ signal }) => getPaymentUVB8jS8(paymentId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!paymentId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getPaymentUVB8jS8>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPaymentUVB8jS8QueryResult = NonNullable<
  Awaited<ReturnType<typeof getPaymentUVB8jS8>>
>;
export type GetPaymentUVB8jS8QueryError = ErrorType<PathApiError>;

/**
 * @summary Í≤∞Ï†ú ÎÇ¥Ïó≠ ÏÉÅÏÑ∏ Ï°∞ÌöåÌïòÍ∏∞
 */
export const useGetPaymentUVB8jS8 = <
  TData = Awaited<ReturnType<typeof getPaymentUVB8jS8>>,
  TError = ErrorType<PathApiError>
>(
  paymentId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getPaymentUVB8jS8>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPaymentUVB8jS8QueryOptions(paymentId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Ï†ÑÏûê ÏòÅÏàòÏ¶ù Ï∑®ÎìùÌïòÍ∏∞
 */
export const getElectronicReceiptUVB8jS8 = (
  paymentId: string,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<ElectronicReceiptResponse>(
    {
      url: `/clus/payments/${paymentId}/electronic-receipt`,
      method: "GET",
      signal,
    },
    options
  );
};

export const getGetElectronicReceiptUVB8jS8QueryKey = (paymentId: string) => {
  return [`/clus/payments/${paymentId}/electronic-receipt`] as const;
};

export const getGetElectronicReceiptUVB8jS8QueryOptions = <
  TData = Awaited<ReturnType<typeof getElectronicReceiptUVB8jS8>>,
  TError = ErrorType<PathApiError>
>(
  paymentId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getElectronicReceiptUVB8jS8>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetElectronicReceiptUVB8jS8QueryKey(paymentId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getElectronicReceiptUVB8jS8>>
  > = ({ signal }) =>
    getElectronicReceiptUVB8jS8(paymentId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!paymentId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getElectronicReceiptUVB8jS8>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetElectronicReceiptUVB8jS8QueryResult = NonNullable<
  Awaited<ReturnType<typeof getElectronicReceiptUVB8jS8>>
>;
export type GetElectronicReceiptUVB8jS8QueryError = ErrorType<PathApiError>;

/**
 * @summary Ï†ÑÏûê ÏòÅÏàòÏ¶ù Ï∑®ÎìùÌïòÍ∏∞
 */
export const useGetElectronicReceiptUVB8jS8 = <
  TData = Awaited<ReturnType<typeof getElectronicReceiptUVB8jS8>>,
  TError = ErrorType<PathApiError>
>(
  paymentId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getElectronicReceiptUVB8jS8>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetElectronicReceiptUVB8jS8QueryOptions(
    paymentId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary ÌôòÎ∂à Ïã†Ï≤≠ÏùÑ ÏúÑÌïú ÏùÄÌñâ ÏΩîÎìú Î™©Î°ù Ï°∞ÌöåÌïòÍ∏∞(Í≤∞Ï†úÎÇ¥Ïó≠Ïùò PGÏÇ¨Ïóê Îî∞Îùº Îã¨ÎùºÏßê)
 */
export const getRefundableBanksUVB8jS8 = (
  paymentId: string,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<RefundBanksResponse>(
    { url: `/clus/payments/${paymentId}/banks`, method: "GET", signal },
    options
  );
};

export const getGetRefundableBanksUVB8jS8QueryKey = (paymentId: string) => {
  return [`/clus/payments/${paymentId}/banks`] as const;
};

export const getGetRefundableBanksUVB8jS8QueryOptions = <
  TData = Awaited<ReturnType<typeof getRefundableBanksUVB8jS8>>,
  TError = ErrorType<PathApiError>
>(
  paymentId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRefundableBanksUVB8jS8>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetRefundableBanksUVB8jS8QueryKey(paymentId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRefundableBanksUVB8jS8>>
  > = ({ signal }) =>
    getRefundableBanksUVB8jS8(paymentId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!paymentId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRefundableBanksUVB8jS8>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetRefundableBanksUVB8jS8QueryResult = NonNullable<
  Awaited<ReturnType<typeof getRefundableBanksUVB8jS8>>
>;
export type GetRefundableBanksUVB8jS8QueryError = ErrorType<PathApiError>;

/**
 * @summary ÌôòÎ∂à Ïã†Ï≤≠ÏùÑ ÏúÑÌïú ÏùÄÌñâ ÏΩîÎìú Î™©Î°ù Ï°∞ÌöåÌïòÍ∏∞(Í≤∞Ï†úÎÇ¥Ïó≠Ïùò PGÏÇ¨Ïóê Îî∞Îùº Îã¨ÎùºÏßê)
 */
export const useGetRefundableBanksUVB8jS8 = <
  TData = Awaited<ReturnType<typeof getRefundableBanksUVB8jS8>>,
  TError = ErrorType<PathApiError>
>(
  paymentId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRefundableBanksUVB8jS8>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRefundableBanksUVB8jS8QueryOptions(
    paymentId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Í≤∞Ï†ú Í∞ÄÎä• ÏàòÎã® Ï°∞ÌöåÌïòÍ∏∞
 */
export const getPossiblePaymentMethods = (
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<PossiblePaymentMethodsResponse>(
    { url: `/clus/payment-methods`, method: "GET", signal },
    options
  );
};

export const getGetPossiblePaymentMethodsQueryKey = () => {
  return [`/clus/payment-methods`] as const;
};

export const getGetPossiblePaymentMethodsQueryOptions = <
  TData = Awaited<ReturnType<typeof getPossiblePaymentMethods>>,
  TError = ErrorType<PathApiError>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getPossiblePaymentMethods>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPossiblePaymentMethodsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPossiblePaymentMethods>>
  > = ({ signal }) => getPossiblePaymentMethods(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPossiblePaymentMethods>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPossiblePaymentMethodsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPossiblePaymentMethods>>
>;
export type GetPossiblePaymentMethodsQueryError = ErrorType<PathApiError>;

/**
 * @summary Í≤∞Ï†ú Í∞ÄÎä• ÏàòÎã® Ï°∞ÌöåÌïòÍ∏∞
 */
export const useGetPossiblePaymentMethods = <
  TData = Awaited<ReturnType<typeof getPossiblePaymentMethods>>,
  TError = ErrorType<PathApiError>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getPossiblePaymentMethods>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPossiblePaymentMethodsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary ÏµúÏã† Íµ¨Îß§Ïûê Ï†ïÎ≥¥ Ï°∞ÌöåÌïòÍ∏∞
 */
export const getLatestBuyer = (
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<LatestBuyerResponse>(
    { url: `/clus/latest-buyer`, method: "GET", signal },
    options
  );
};

export const getGetLatestBuyerQueryKey = () => {
  return [`/clus/latest-buyer`] as const;
};

export const getGetLatestBuyerQueryOptions = <
  TData = Awaited<ReturnType<typeof getLatestBuyer>>,
  TError = ErrorType<PathApiError>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getLatestBuyer>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetLatestBuyerQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLatestBuyer>>> = ({
    signal,
  }) => getLatestBuyer(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLatestBuyer>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetLatestBuyerQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLatestBuyer>>
>;
export type GetLatestBuyerQueryError = ErrorType<PathApiError>;

/**
 * @summary ÏµúÏã† Íµ¨Îß§Ïûê Ï†ïÎ≥¥ Ï°∞ÌöåÌïòÍ∏∞
 */
export const useGetLatestBuyer = <
  TData = Awaited<ReturnType<typeof getLatestBuyer>>,
  TError = ErrorType<PathApiError>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getLatestBuyer>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLatestBuyerQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
