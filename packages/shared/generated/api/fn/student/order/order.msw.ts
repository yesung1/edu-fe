/**
 * Generated by orval v6.24.0 🍺
 * Do not edit manually.
 * CLUS API
 * CLUS Backend API Spec
 * OpenAPI spec version: v1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type { IdResponse, OrderItemResponse, Unit } from "../../../model";

export const getSendPaymentFailureNotificationToSlackMock = (): Unit => ({});

export const getCreateOrderMock = (overrideResponse: any = {}): IdResponse => ({
  id: faker.word.sample(),
  ...overrideResponse,
});

export const getSaveOrderItemMock = (
  overrideResponse: any = {}
): IdResponse => ({ id: faker.word.sample(), ...overrideResponse });

export const getGetPaymentId6bSQ990Mock = (
  overrideResponse: any = {}
): IdResponse => ({ id: faker.word.sample(), ...overrideResponse });

export const getGetOrderItemMock = (
  overrideResponse: any = {}
): OrderItemResponse => ({
  clinicItems: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    clinicId: faker.word.sample(),
    clinicTitle: faker.word.sample(),
    majorSubject: faker.word.sample(),
    originalPrice: faker.number.int({ min: undefined, max: undefined }),
    parentInfoRequirement: faker.helpers.arrayElement([
      "MANDATORY",
      "OPTIONAL",
      "NONE",
    ] as const),
    salePrice: faker.number.int({ min: undefined, max: undefined }),
    teacherName: faker.word.sample(),
    ...overrideResponse,
  })),
  workbookItems: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    clinicId: faker.word.sample(),
    clinicWorkbookMapId: faker.word.sample(),
    isRequired: faker.datatype.boolean(),
    majorSubject: faker.word.sample(),
    salePrice: faker.number.int({ min: undefined, max: undefined }),
    teacherName: faker.word.sample(),
    workbookId: faker.word.sample(),
    workbookTitle: faker.word.sample(),
    workbookVolumeCount: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  })),
  ...overrideResponse,
});

export const getExpireVirtualAccountUVB8jS8Mock = (): Unit => ({});

export const getSendPaymentFailureNotificationToSlackMockHandler = (
  overrideResponse?: Unit
) => {
  return http.post("*/clus/port-one/payment/notify/failure", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getSendPaymentFailureNotificationToSlackMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getCreateOrderMockHandler = (overrideResponse?: IdResponse) => {
  return http.post("*/clus/port-one/order", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getCreateOrderMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getSaveOrderItemMockHandler = (overrideResponse?: IdResponse) => {
  return http.post("*/clus/order/item", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSaveOrderItemMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getGetPaymentId6bSQ990MockHandler = (
  overrideResponse?: IdResponse
) => {
  return http.get("*/clus/port-one/orders/:orderId/payment", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetPaymentId6bSQ990Mock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getGetOrderItemMockHandler = (
  overrideResponse?: OrderItemResponse
) => {
  return http.get("*/clus/order/items/:orderItemId", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetOrderItemMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getExpireVirtualAccountUVB8jS8MockHandler = (
  overrideResponse?: Unit
) => {
  return http.delete(
    "*/clus/port-one/payments/:paymentId/virtual-account",
    async () => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse
            ? overrideResponse
            : getExpireVirtualAccountUVB8jS8Mock()
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        }
      );
    }
  );
};
export const getOrderMock = () => [
  getSendPaymentFailureNotificationToSlackMockHandler(),
  getCreateOrderMockHandler(),
  getSaveOrderItemMockHandler(),
  getGetPaymentId6bSQ990MockHandler(),
  getGetOrderItemMockHandler(),
  getExpireVirtualAccountUVB8jS8MockHandler(),
];
