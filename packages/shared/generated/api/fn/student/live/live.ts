/**
 * Generated by orval v6.24.0 🍺
 * Do not edit manually.
 * CLUS API
 * CLUS Backend API Spec
 * OpenAPI spec version: v1.0.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type { PathApiError, StudentLiveResponse } from "../../../model";
import { axiosInstance } from "../../../config/axios-instance";
import type { ErrorType } from "../../../config/axios-instance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary 진행중 클리닉의 라이브 목록 조회하기
 */
export const getLivesB8FT85M = (
  clinicId: string,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<StudentLiveResponse[]>(
    { url: `/clus/clinics/${clinicId}/lives`, method: "GET", signal },
    options
  );
};

export const getGetLivesB8FT85MQueryKey = (clinicId: string) => {
  return [`/clus/clinics/${clinicId}/lives`] as const;
};

export const getGetLivesB8FT85MQueryOptions = <
  TData = Awaited<ReturnType<typeof getLivesB8FT85M>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLivesB8FT85M>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetLivesB8FT85MQueryKey(clinicId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLivesB8FT85M>>> = ({
    signal,
  }) => getLivesB8FT85M(clinicId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!clinicId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getLivesB8FT85M>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetLivesB8FT85MQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLivesB8FT85M>>
>;
export type GetLivesB8FT85MQueryError = ErrorType<PathApiError>;

/**
 * @summary 진행중 클리닉의 라이브 목록 조회하기
 */
export const useGetLivesB8FT85M = <
  TData = Awaited<ReturnType<typeof getLivesB8FT85M>>,
  TError = ErrorType<PathApiError>
>(
  clinicId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLivesB8FT85M>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLivesB8FT85MQueryOptions(clinicId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
