/**
 * Generated by orval v6.24.0 🍺
 * Do not edit manually.
 * CLUS API
 * CLUS Backend API Spec
 * OpenAPI spec version: v1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type { StudentLiveResponse } from "../../../model";

export const getGetLivesB8FT85MMock = (
  overrideResponse: any = {}
): StudentLiveResponse[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    id: faker.word.sample(),
    isCompleted: faker.datatype.boolean(),
    isJoinable: faker.datatype.boolean(),
    liveEndedAt: faker.word.sample(),
    liveStartedAt: faker.word.sample(),
    name: faker.word.sample(),
    remainingDayCount: faker.number.int({ min: undefined, max: undefined }),
    status: faker.helpers.arrayElement(["PENDING", "ON_AIR", "ENDED"] as const),
    ...overrideResponse,
  }));

export const getGetLivesB8FT85MMockHandler = (
  overrideResponse?: StudentLiveResponse[]
) => {
  return http.get("*/clus/clinics/:clinicId/lives", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetLivesB8FT85MMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};
export const getLiveMock = () => [getGetLivesB8FT85MMockHandler()];
